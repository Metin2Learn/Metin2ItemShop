[
  {
    "content": "1. service.h / CommonDefines.h Add:\n#define ENABLE_ITEMSHOP 2. length.h Add:\n#ifdef ENABLE_ITEMSHOP enum { ITEMSHOP_CATEGORY_MAX_LEN = 24, ITEMSHOP_ICON_MAX_LEN = 24, ITEMSHOP_HASH_MAX_LEN = 32, PROMOTION_CODE_MAX_LEN = 48, }; #endif 3. tables.h Search:\nHEADER_GD_SETUP\t= 0xff, Add above:\n#ifdef ENABLE_ITEMSHOP HEADER_GD_RELOAD_ITEMSHOP = 200, HEADER_GD_BUY_ITEMSHOP = 201, HEADER_GD_PROMOTION_REDEEM = 202, #endif Search:\nHEADER_DG_MAP_LOCATIONS\t= 0xfe, Add above:\n#ifdef ENABLE_ITEMSHOP HEADER_DG_RELOAD_ITEMSHOP = 192, HEADER_DG_BUY_ITEMSHOP_ITEM = 193, HEADER_DG_REFRESH_ITEMSHOP_SINGLE_ITEM = 194, HEADER_DG_REMOVE_ITEMSHOP_SINGLE_ITEM = 195, HEADER_DG_ADD_ITEMSHOP_SINGLE_ITEM = 196, HEADER_DG_PROMOTION_CODE_REDEEM = 197, #endif Add to end of file above #pragma pack():\n#ifdef ENABLE_ITEMSHOP typedef struct SItemshopCategoryInfo { char\tcategory[ITEMSHOP_CATEGORY_MAX_LEN + 1]; char\ticon[ITEMSHOP_ICON_MAX_LEN + 1]; }TItemshopCategoryInfo; typedef struct SItemshopCategoryTable { BYTE\tindex; TItemshopCategoryInfo\tinfo; } TItemshopCategoryTable; typedef struct SItemshopItemTable { char\thash[ITEMSHOP_HASH_MAX_LEN + 1]; unsigned long long\tullPrice; BYTE\tbyDiscountPercent; long long\tllLimitCount; BYTE\tbyCategory; DWORD\tdwVnum; WORD\twCount; time_t\tend_time; long\talSockets[ITEM_SOCKET_MAX_NUM]; TPlayerItemAttribute\taAttr[ITEM_ATTRIBUTE_MAX_NUM]; BYTE\tweight; } TItemshopItemTable; typedef struct SPromotionItemTable { DWORD\tdwVnum; WORD\twCount; long\talSockets[ITEM_SOCKET_MAX_NUM]; TPlayerItemAttribute\taAttr[ITEM_ATTRIBUTE_MAX_NUM]; } TPromotionItemTable; typedef struct SSpecialOfferTimes { time_t\tstart_time; time_t\tend_time; bool\tis_activ; } TSpecialOfferTimes; typedef struct SSpecialOfferItems { long long\tllItemIndex; TSpecialOfferTimes\ttimes; TItemshopItemTable\titem; } TSpecialOfferItems; typedef struct SItemshopCheckBuy { char\thash[ITEMSHOP_HASH_MAX_LEN + 1]; WORD\twCount; } TItemshopCheckBuy; typedef struct SItemshopBuyAnswer { bool\tcanBuy; WORD\twCount; char\tcode[ITEMSHOP_HASH_MAX_LEN + 1]; } TItemshopBuyAnswer; typedef struct SPromotionRedeem { DWORD\taccID; char\tcode[PROMOTION_CODE_MAX_LEN + 1]; } TPromotionRedeem; typedef struct SPromotionRedeemInfo { BYTE\tbyRedeemAnswer; WORD\treward_count; } TPromotionRedeemAnswer; enum { REDEEM_FAIL, REDEEM_SUCCESS, REDEEM_ALREADY_REDEEMED }; #endif 4. utils.h Add:\n#include \"service.h\" Add to end of file:\n#ifdef ENABLE_ITEMSHOP inline bool str_to_number(unsigned long long\u0026 out, const char* in) { if (0 == in || 0 == in[0])\treturn false; out = (unsigned long long)strtoull(in, NULL, 10); return true; } template \u003ctypename T\u003e inline bool check_mul_error(T a, T b) { bool result = a == 0 || b == 0 || ( ((T)(a * b) / a) != b); return result; } #endif ",
    "description": "",
    "tags": null,
    "title": "Common",
    "uri": "/systems/itemshop/installation/server/common/"
  },
  {
    "content": "1. PythonWindowManagerModule.cpp Search:\nvoid initwndMgr() Add above:\n#ifdef ENABLE_ITEMSHOP PyObject* wndImageResetFrame(PyObject* poSelf, PyObject* poArgs) { UI::CWindow* pWindow; if (!PyTuple_GetWindow(poArgs, 0, \u0026pWindow)) return Py_BuildException(); ((UI::CAniImageBox*)pWindow)-\u003eResetFrame(); return Py_BuildNone(); } #endif Search:\nvoid initwndMgr() { static PyMethodDef s_methods[] = { Add:\n#ifdef ENABLE_ITEMSHOP { \"ResetFrame\",\twndImageResetFrame,\tMETH_VARARGS }, #endif ",
    "description": "",
    "tags": null,
    "title": "EterPythonLib",
    "uri": "/systems/itemshop/installation/binary/eterpythonlib/"
  },
  {
    "content": "Anything you need to use the itemshop C++17 needed!\nhttps://metin2.dev/topic/27990-tut-c17-client-side/\nPro-Tip: You can use the copy-icon to copy code-blocks :)\n",
    "description": "",
    "tags": null,
    "title": "Installation",
    "uri": "/systems/itemshop/installation/"
  },
  {
    "content": "Anything you need for the server side changes ",
    "description": "",
    "tags": null,
    "title": "Server",
    "uri": "/systems/itemshop/installation/server/"
  },
  {
    "content": "Serverfiles What is special about this files?\nNothing! Everything we did, you can do with enough work, time and effort. Why should you use this files?\nTo create your own project on a safe and modern base. To start developing your own systems. What do you get?\nA clean state of the game based on latest v3. Local developing environment. Client, Client-Source, Server-Source, Mysql-Portable, Packer-Source, Dumper-Source. Discount on all our systems and services. Git access to the main repository and branches. Early access to all of our future releases. Help you to create your own clean \u0026 modern work/develop environment. Other things that we offer as a community:\nSupport for problems, exploits, and bugs in your Project. Services to secure your server from attacks. Code-review to check and fix exploits. Systems that are implemented:\nClientside Multilanguage\nShining-System via txt file\nItemshop by sura_head\nTargetInfo\nWolfman (Disabled by default)\nPickup-Filter\nIncreased gold max\nUI outline shower\nDragonalchemy\nElement-System\nText-renewal\nItem check-in/out for safebox \u0026 trade\nCostume-System\nMount Pet Weapon Armor Hair Other changes:\nSpeedtree memleak fix Multible granny fixes / optimizations All known exploit / bug-fixes Sectree optimizations Lz4 compression Xoshiro Local load - You dont have to pack root, uiscript \u0026 locale Build can be used on windows \u0026 freebsd without changes with the use of “git sparse-checkout” mysql-portable Useful tools \u0026 scripts:\nmap_to_point_format.py - converts all map/npc.txt files into map_point.txt for clientside multilanguage addon. dump_proto source - converts item_names.txt/item_proto.txt into item_proto / mob_names.txt/mob_proto.txt into mob_proto mysql_to_proto source - generates item_proto \u0026 mob_proto pack-source (lz4) - generates encrypt and decrypt .exe for your pack files. This files are community driven, if you have system suggestions feel free to write us on discord.\nWe only implement systems written by sura_head All systems written by sura_head will also be published as .patch files Price: 200€ Payment methods:\nBitcoin Cryptovoucher.io ",
    "description": "",
    "tags": null,
    "title": "Serverfiles",
    "uri": "/serverfiles/"
  },
  {
    "content": "1. defines.h Add:\n#define ENABLE_ITEMSHOP 2. Packet.h Search:\nHEADER_CG_TIME_SYNC\t= 0xfc, HEADER_CG_PONG\t= 0xfe, Add above:\n#ifdef ENABLE_ITEMSHOP HEADER_CG_BUY_ITEMSHOP_ITEM\t= 240, HEADER_CG_PROMOTION\t= 241, #endif Search:\nHEADER_GC_HANDSHAKE_OK\t= 0xfc, HEADER_GC_PHASE\t= 0xfd, Add above:\n#ifdef ENABLE_ITEMSHOP HEADER_GC_ITEMSHOP\t= 240, #endif Add to end of file above #pragma pack(pop):\n#ifdef ENABLE_ITEMSHOP enum { ITEMSHOP_CATEGORY_MAX_LEN = 24, ITEMSHOP_ICON_MAX_LEN = 24, ITEMSHOP_HASH_MAX_LEN = 32, PROMOTION_CODE_MAX_LEN = 48, }; typedef struct SItemshopCategoryInfo { char\tcategory[ITEMSHOP_CATEGORY_MAX_LEN + 1]; char\ticon[ITEMSHOP_ICON_MAX_LEN + 1]; }TItemshopCategoryInfo; typedef struct SPacketGCitemshopCategorySize { DWORD size; } TPacketGCitemshopCategorySize; typedef struct SPacketGCItemshopItemSize { DWORD size; } TPacketGCItemshopItemSize; typedef struct SPacketGCItemshopInfo { BYTE header; DWORD subheader; } TPacketGCItemshopInfo; enum { SUBHEADER_ITEMSHOP_REFRESH_ITEMS, SUBHEADER_ITEMSHOP_REFRESH_COINS, SUBHEADER_ITEMSHOP_REFRESH_SINGLE_ITEM, SUBHEADER_ITEMSHOP_REMOVE_SINGLE_ITEM, SUBHEADER_ITEMSHOP_ADD_SINGLE_ITEM, SUBHEADER_PROMOTION_CODE_REWARDS, }; typedef struct SItemshopItemTable { char\thash[ITEMSHOP_HASH_MAX_LEN + 1]; unsigned long long\tullPrice; BYTE\tbyDiscountPercent; long long\tllLimitCount; BYTE\tbyCategory; DWORD\tdwVnum; WORD\twCount; time_t\tend_time; long\talSockets[ITEM_SOCKET_SLOT_MAX_NUM]; TPlayerItemAttribute\taAttr[ITEM_ATTRIBUTE_SLOT_MAX_NUM]; BYTE\tweight; } TItemshopItemTable; typedef struct SPromotionItemTable { DWORD\tdwVnum; WORD\twCount; long\talSockets[ITEM_SOCKET_SLOT_MAX_NUM]; TPlayerItemAttribute\taAttr[ITEM_ATTRIBUTE_SLOT_MAX_NUM]; } TPromotionItemTable; typedef struct SPacketCGBuyItemshopItem { BYTE\theader; char\thash[ITEMSHOP_HASH_MAX_LEN + 1]; WORD\twCount; } TPacketCGBuyItemshopItem; typedef struct SPacketCGRedeemPromotionCode { BYTE\theader; char\tpromotion_code[PROMOTION_CODE_MAX_LEN + 1]; } TPacketCGRedeemPromotionCode; #endif 3. PythonApplication.cpp Search:\ntime_t CPythonApplication::GetServerTimeStamp() { return (time(0) - m_tLocalStartTime) + m_tServerTime; } Add:\n#ifdef ENABLE_ITEMSHOP time_t CPythonApplication::GetUNIX() { return time(0); } #endif 4. PythonApplication.h Search:\ntime_t GetServerTimeStamp(); Add:\n#ifdef ENABLE_ITEMSHOP time_t GetUNIX(); #endif 5. PythonApplicationModule.cpp Search:\nPyObject * appGetGlobalTimeStamp(PyObject * poSelf, PyObject * poArgs) { return Py_BuildValue(\"i\", CPythonApplication::Instance().GetServerTimeStamp()); } Add:\n#ifdef ENABLE_ITEMSHOP PyObject* appGetUNIX(PyObject* poSelf, PyObject* poArgs) { return Py_BuildValue(\"i\", CPythonApplication::Instance().GetUNIX()); } #endif Search:\n{ \"GetGlobalTimeStamp\",\tappGetGlobalTimeStamp,\tMETH_VARARGS }, Add:\n#ifdef ENABLE_ITEMSHOP { \"GetUNIX\",\tappGetUNIX,\tMETH_VARARGS }, #endif Add to end of file above }:\n#ifdef ENABLE_ITEMSHOP PyModule_AddIntConstant(poModule, \"ENABLE_ITEMSHOP\", 1); #else PyModule_AddIntConstant(poModule, \"ENABLE_ITEMSHOP\", 0); #endif 6. PythonItemModule.cpp Search:\nPyModule_AddIntConstant(poModule, \"ITEM_FLAG_CONFIRM_WHEN_USE\",\tCItemData::ITEM_FLAG_CONFIRM_WHEN_USE); Add:\n#ifdef ENABLE_ITEMSHOP PyModule_AddIntConstant(poModule, \"ITEM_FLAG_STACKABLE\",\tCItemData::ITEM_FLAG_STACKABLE); #endif 7. PythonNetworkStream.cpp Search:\npublic: CMainPacketHeaderMap() { Add:\n#ifdef ENABLE_ITEMSHOP Set(HEADER_GC_ITEMSHOP, CNetworkPacketHeaderMap::TPacketType(sizeof(TPacketGCItemshopInfo), STATIC_SIZE_PACKET)); #endif 8. PythonNetworkStream.h Search:\nbool RecvMallOpenPacket(); bool RecvMallItemSetPacket(); bool RecvMallItemDelPacket(); Add above:\n#ifdef ENABLE_ITEMSHOP bool RecvItemshopPacket(); bool SendBuyItemshopItemPacket(const char* hash, WORD wCount); bool SendRedeemPromotionCodePacket(const char* promotion_code); #endif 9. PythonNetworkStreamModule.cpp Search:\nvoid initnet() Add above:\n#ifdef ENABLE_ITEMSHOP PyObject* netSendBuyItemshopItemPacket(PyObject* poSelf, PyObject* poArgs) { char* szHash; if (!PyTuple_GetString(poArgs, 0, \u0026szHash)) return Py_BuildException(); int count; if (!PyTuple_GetInteger(poArgs, 1, \u0026count)) return Py_BuildException(); CPythonNetworkStream::Instance().SendBuyItemshopItemPacket(szHash, count); return Py_BuildNone(); } PyObject* netSendRedeemPromotionCodePacket(PyObject* poSelf, PyObject* poArgs) { char* szCode; if (!PyTuple_GetString(poArgs, 0, \u0026szCode)) return Py_BuildException(); if (!strcmp(szCode, \"\")) return Py_BuildNone(); if (strlen(szCode) \u003c= 0) return Py_BuildNone(); CPythonNetworkStream::Instance().SendRedeemPromotionCodePacket(szCode); return Py_BuildNone(); } #endif Search:\nvoid initnet() { static PyMethodDef s_methods[] = { Add: #ifdef ENABLE_ITEMSHOP { \"SendBuyItemshopItemPacket\",\tnetSendBuyItemshopItemPacket,\tMETH_VARARGS }, { \"SendRedeemPromotionCodePacket\",\tnetSendRedeemPromotionCodePacket,\tMETH_VARARGS }, #endif 10. PythonNetworkStreamPhaseGame.cpp Search:\ndefault: ret = RecvDefaultPacket(header); break; Add above:\n#ifdef ENABLE_ITEMSHOP case HEADER_GC_ITEMSHOP: ret = RecvItemshopPacket(); break; #endif Add to end of file:\n#ifdef ENABLE_ITEMSHOP bool CPythonNetworkStream::SendBuyItemshopItemPacket(const char* hash, WORD wCount) { TPacketCGBuyItemshopItem p; p.header = HEADER_CG_BUY_ITEMSHOP_ITEM; p.wCount = wCount; strncpy(p.hash, hash, sizeof(p.hash)); if (!Send(sizeof(p), \u0026p)) { return false; } return true; } bool CPythonNetworkStream::SendRedeemPromotionCodePacket(const char* promotion_code) { TPacketCGRedeemPromotionCode p; p.header = HEADER_CG_PROMOTION; strncpy(p.promotion_code, promotion_code, sizeof(p.promotion_code) - 1); if (!Send(sizeof(p), \u0026p)) { return false; } return true; } bool CPythonNetworkStream::RecvItemshopPacket() { TPacketGCItemshopInfo packet; if (!Recv(sizeof(packet), \u0026packet)) return false; DWORD subHeader = packet.subheader; switch (subHeader) { case SUBHEADER_ITEMSHOP_REFRESH_ITEMS: { TPacketGCitemshopCategorySize itemshop_category_size; if (!Recv(sizeof(itemshop_category_size), \u0026itemshop_category_size)) return false; std::map\u003cBYTE, TItemshopCategoryInfo\u003e itemshop_categories; BYTE key = 0; TItemshopCategoryInfo category_info; for (int i = 0; i \u003c itemshop_category_size.size; i++) { if (!Recv(sizeof(BYTE), \u0026key)) return false; if (!Recv(sizeof(category_info), \u0026category_info)) return false; itemshop_categories.insert(std::pair(key, category_info)); } TPacketGCItemshopItemSize itemshop_item_size; if (!Recv(sizeof(itemshop_item_size), \u0026itemshop_item_size)) return false; std::map\u003cBYTE, std::vector\u003cTItemshopItemTable\u003e\u003e itemshop_items; size_t vec_size = 0; TItemshopItemTable table{}; for (int i = 0; i \u003c itemshop_item_size.size; i++) { if (!Recv(sizeof(BYTE), \u0026key)) { return false; } if (!Recv(sizeof(size_t), \u0026vec_size)) { return false; } std::vector\u003cTItemshopItemTable\u003e itemVec; itemVec.resize(vec_size); if (!Recv(sizeof(TItemshopItemTable) * vec_size, itemVec.data())) { return false; } itemshop_items[key] = itemVec; } // NOTE: Sort items in categories for (auto\u0026 vec_item : itemshop_items) { std::sort(vec_item.second.begin(), vec_item.second.end(), [](TItemshopItemTable const\u0026 f, TItemshopItemTable const\u0026 s) { return f.end_time \u003e s.end_time || f.end_time == s.end_time \u0026\u0026 (f.llLimitCount \u003e s.llLimitCount || f.llLimitCount == s.llLimitCount \u0026\u0026 (f.byDiscountPercent \u003e s.byDiscountPercent || f.byDiscountPercent == s.byDiscountPercent \u0026\u0026 (f.weight \u003e s.weight || f.weight == s.weight \u0026\u0026 (f.dwVnum \u003e s.dwVnum)))); } ); } PyObject* py_itemshop_infos = PyList_New(0); for (const auto\u0026 [key, cat] : itemshop_items) { PyObject* py_itemshop_category = PyDict_New(); PyDict_SetItem(py_itemshop_category, PyString_FromString(\"index\"), PyInt_FromLong(key)); PyDict_SetItem(py_itemshop_category, PyString_FromString(\"category\"), PyString_FromString(itemshop_categories.at(key).category)); PyDict_SetItem(py_itemshop_category, PyString_FromString(\"icon\"), PyString_FromString(itemshop_categories.at(key).icon)); PyObject* py_itemshop_items = PyList_New(0); for (const auto\u0026 item : cat) { PyObject* py_itemshop_item = PyDict_New(); PyDict_SetItem(py_itemshop_item, PyString_FromString(\"vnum\"), PyInt_FromLong(item.dwVnum)); PyObject* sockets = PyList_New(0); for (int socket = 0; socket \u003c ITEM_SOCKET_SLOT_MAX_NUM; socket++) { PyList_Append(sockets, PyInt_FromLong(item.alSockets[socket])); } PyDict_SetItem(py_itemshop_item, PyString_FromString(\"sockets\"), sockets); PyObject* attrList = PyList_New(0); for (const auto\u0026 attr : item.aAttr) { PyList_Append(attrList, Py_BuildValue(\"ii\", attr.bType, attr.sValue)); } PyDict_SetItem(py_itemshop_item, PyString_FromString(\"attr\"), attrList); PyDict_SetItem(py_itemshop_item, PyString_FromString(\"price\"), PyInt_FromLong(item.ullPrice)); PyDict_SetItem(py_itemshop_item, PyString_FromString(\"count\"), PyInt_FromLong(item.wCount)); PyDict_SetItem(py_itemshop_item, PyString_FromString(\"hash\"), PyString_FromString(item.hash)); PyDict_SetItem(py_itemshop_item, PyString_FromString(\"discount\"), PyInt_FromLong(item.byDiscountPercent)); PyDict_SetItem(py_itemshop_item, PyString_FromString(\"limitCount\"), PyInt_FromLong(item.llLimitCount)); PyDict_SetItem(py_itemshop_item, PyString_FromString(\"endTime\"), PyInt_FromLong(item.end_time)); PyList_Append(py_itemshop_items, py_itemshop_item); } PyDict_SetItem(py_itemshop_category, PyString_FromString(\"items\"), py_itemshop_items); PyList_Append(py_itemshop_infos, py_itemshop_category); } PyCallClassMemberFunc(m_apoPhaseWnd[PHASE_WINDOW_GAME], \"BINARY_UPDATE_ITEMSHOP_ITEMS\", Py_BuildValue(\"(O)\", py_itemshop_infos)); } break; case SUBHEADER_ITEMSHOP_REFRESH_SINGLE_ITEM: { TItemshopItemTable item; if (!Recv(sizeof(item), \u0026item)) return false; PyObject* py_itemshop_item = PyDict_New(); PyDict_SetItem(py_itemshop_item, PyString_FromString(\"vnum\"), PyInt_FromLong(item.dwVnum)); PyObject* sockets = PyList_New(0); for (int socket = 0; socket \u003c ITEM_SOCKET_SLOT_MAX_NUM; socket++) { PyList_Append(sockets, PyInt_FromLong(item.alSockets[socket])); } PyDict_SetItem(py_itemshop_item, PyString_FromString(\"sockets\"), sockets); PyObject* attrList = PyList_New(0); for (int attr = 0; attr \u003c ITEM_ATTRIBUTE_SLOT_MAX_NUM; attr++) { PyList_Append(attrList, Py_BuildValue(\"ii\", item.aAttr[attr].bType, item.aAttr[attr].sValue)); } PyDict_SetItem(py_itemshop_item, PyString_FromString(\"attr\"), attrList); PyDict_SetItem(py_itemshop_item, PyString_FromString(\"price\"), PyInt_FromLong(item.ullPrice)); PyDict_SetItem(py_itemshop_item, PyString_FromString(\"count\"), PyInt_FromLong(item.wCount)); PyDict_SetItem(py_itemshop_item, PyString_FromString(\"hash\"), PyString_FromString(item.hash)); PyDict_SetItem(py_itemshop_item, PyString_FromString(\"discount\"), PyInt_FromLong(item.byDiscountPercent)); PyDict_SetItem(py_itemshop_item, PyString_FromString(\"limitCount\"), PyInt_FromLong(item.llLimitCount)); PyDict_SetItem(py_itemshop_item, PyString_FromString(\"endTime\"), PyInt_FromLong(item.end_time)); PyCallClassMemberFunc(m_apoPhaseWnd[PHASE_WINDOW_GAME], \"BINARY_UPDATE_ITEMSHOP_ITEM\", Py_BuildValue(\"(O)\", py_itemshop_item)); } break; case SUBHEADER_ITEMSHOP_REFRESH_COINS: { unsigned long long ullCoins; if (!Recv(sizeof(unsigned long long), \u0026ullCoins)) return false; PyCallClassMemberFunc(m_apoPhaseWnd[PHASE_WINDOW_GAME], \"BINARY_UPDATE_ITEMSHOP_COINS\", Py_BuildValue(\"(L)\", ullCoins)); } break; case SUBHEADER_ITEMSHOP_REMOVE_SINGLE_ITEM: { TItemshopItemTable item; if (!Recv(sizeof(item), \u0026item)) return false; PyCallClassMemberFunc(m_apoPhaseWnd[PHASE_WINDOW_GAME], \"BINARY_REMOVE_ITEMSHOP_ITEM\", Py_BuildValue(\"(s)\", item.hash)); } break; case SUBHEADER_ITEMSHOP_ADD_SINGLE_ITEM: { TItemshopCategoryInfo category_info; if (!Recv(sizeof(category_info), \u0026category_info)) return false; TItemshopItemTable item; if (!Recv(sizeof(item), \u0026item)) return false; PyObject* py_itemshop_category = PyDict_New(); PyDict_SetItem(py_itemshop_category, PyString_FromString(\"index\"), PyInt_FromLong(item.byCategory)); PyDict_SetItem(py_itemshop_category, PyString_FromString(\"category\"), PyString_FromString(category_info.category)); PyDict_SetItem(py_itemshop_category, PyString_FromString(\"icon\"), PyString_FromString(category_info.icon)); PyObject* py_itemshop_items = PyList_New(0); PyObject* py_itemshop_item = PyDict_New(); PyDict_SetItem(py_itemshop_item, PyString_FromString(\"vnum\"), PyInt_FromLong(item.dwVnum)); PyObject* sockets = PyList_New(0); for (int socket = 0; socket \u003c ITEM_SOCKET_SLOT_MAX_NUM; socket++) { PyList_Append(sockets, PyInt_FromLong(item.alSockets[socket])); } PyDict_SetItem(py_itemshop_item, PyString_FromString(\"sockets\"), sockets); PyObject* attrList = PyList_New(0); for (const auto\u0026 attr : item.aAttr) { PyList_Append(attrList, Py_BuildValue(\"ii\", attr.bType, attr.sValue)); } PyDict_SetItem(py_itemshop_item, PyString_FromString(\"attr\"), attrList); PyDict_SetItem(py_itemshop_item, PyString_FromString(\"price\"), PyInt_FromLong(item.ullPrice)); PyDict_SetItem(py_itemshop_item, PyString_FromString(\"count\"), PyInt_FromLong(item.wCount)); PyDict_SetItem(py_itemshop_item, PyString_FromString(\"hash\"), PyString_FromString(item.hash)); PyDict_SetItem(py_itemshop_item, PyString_FromString(\"discount\"), PyInt_FromLong(item.byDiscountPercent)); PyDict_SetItem(py_itemshop_item, PyString_FromString(\"limitCount\"), PyInt_FromLong(item.llLimitCount)); PyDict_SetItem(py_itemshop_item, PyString_FromString(\"endTime\"), PyInt_FromLong(item.end_time)); PyList_Append(py_itemshop_items, py_itemshop_item); PyDict_SetItem(py_itemshop_category, PyString_FromString(\"items\"), py_itemshop_items); PyCallClassMemberFunc(m_apoPhaseWnd[PHASE_WINDOW_GAME], \"BINARY_ADD_ITEMSHOP_ITEM\", Py_BuildValue(\"(O)\", py_itemshop_category)); } break; case SUBHEADER_PROMOTION_CODE_REWARDS: { BYTE answer; if (!Recv(sizeof(BYTE), \u0026answer)) return false; size_t size; if (!Recv(sizeof(size_t), \u0026size)) return false; std::vector \u003cTPromotionItemTable\u003e items; items.clear(); items.resize(size); if (size \u0026\u0026 !Recv(sizeof(TPromotionItemTable) * size, \u0026items[0])) return false; PyObject* py_itemshop_items = PyList_New(0); for (const auto\u0026 item : items) { PyObject* py_itemshop_item = PyDict_New(); PyDict_SetItem(py_itemshop_item, PyString_FromString(\"vnum\"), PyInt_FromLong(item.dwVnum)); PyObject* sockets = PyList_New(0); for (int socket = 0; socket \u003c ITEM_SOCKET_SLOT_MAX_NUM; socket++) { PyList_Append(sockets, PyInt_FromLong(item.alSockets[socket])); } PyDict_SetItem(py_itemshop_item, PyString_FromString(\"sockets\"), sockets); PyObject* attrList = PyList_New(0); for (int attr = 0; attr \u003c ITEM_ATTRIBUTE_SLOT_MAX_NUM; attr++) { PyList_Append(attrList, Py_BuildValue(\"ii\", item.aAttr[attr].bType, item.aAttr[attr].sValue)); } PyDict_SetItem(py_itemshop_item, PyString_FromString(\"attr\"), attrList); PyDict_SetItem(py_itemshop_item, PyString_FromString(\"count\"), PyInt_FromLong(item.wCount)); PyList_Append(py_itemshop_items, py_itemshop_item); } PyCallClassMemberFunc(m_apoPhaseWnd[PHASE_WINDOW_GAME], \"BINARY_PROMOTION_CODE_REWARDS\", Py_BuildValue(\"(iO)\", answer, py_itemshop_items)); } break; } return true; } #endif ",
    "description": "",
    "tags": null,
    "title": "UserInterface",
    "uri": "/systems/itemshop/installation/binary/userinterface/"
  },
  {
    "content": "###Anything you need for the client side changes ",
    "description": "",
    "tags": null,
    "title": "Binary",
    "uri": "/systems/itemshop/installation/binary/"
  },
  {
    "content": "1. ClientManager.cpp Search:\nCClientManager::CClientManager() : m_pkAuthPeer(NULL), m_iPlayerIDStart(0), m_iPlayerDeleteLevelLimit(0), m_iPlayerDeleteLevelLimitLower(0), m_iShopTableSize(0), m_pShopTable(NULL), m_iRefineTableSize(0), m_pRefineTable(NULL), Add:\n#ifdef ENABLE_ITEMSHOP m_iItemshopTableCategorySize(0), m_pItemshopTableCategories(NULL), m_iItemshopTableItemSize(0), m_pItemshopTableItems(NULL), #endif Search:\nmemset(g_query_count, 0, sizeof(g_query_count)); Add:\n#ifdef ENABLE_ITEMSHOP m_map_ItemshopLimitCountFlush.clear(); m_vec_usedSeeds.clear(); m_ItemshopItems.clear(); #endif Search:\nif (!InitializeTables()) { sys_err(\"Table Initialize FAILED\"); return false; } Add:\n#ifdef ENABLE_ITEMSHOP if (!InitializePromotionCodes()) { sys_err(\"InitializePromotionCodes FAILED\"); return false; } if (!InitializeRedeemedPromotionCodes()) { sys_err(\"InitializeRedeemedPromotionCodes FAILED\"); return false; } if (!InitializeItemshopSpecialOffers()) { sys_err(\"InitializeItemshopSpecialOffers FAILED\"); return false; } if (!InitializeItemshopCategoryTable()) { sys_err(\"InitializeItemshopCategoryTable FAILED\"); return false; } if (!InitializeItemshopItemTable()) { sys_err(\"InitializeItemshopItemTable FAILED\"); return false; } #endif Search:\nvoid CClientManager::MainLoop() { SQLMsg * tmp; sys_log(0, \"ClientManager pointer is %p\", this); while (!m_bShutdowned) { Add:\n#ifdef ENABLE_ITEMSHOP time_t now = time(0); for (auto\u0026 specialoffer_item : m_vec_itemshopSpecialOfferItems) { if (specialoffer_item.times.start_time \u003c now \u0026\u0026 !specialoffer_item.times.is_activ) { specialoffer_item.times.is_activ = true; AddSingleItemshopItem(\u0026specialoffer_item.item, specialoffer_item.llItemIndex); } else if (specialoffer_item.times.end_time \u003c now) { RemoveSingleItemshopItem(specialoffer_item.llItemIndex); } } #endif Search:\nsys_log(0, \"MainLoop exited, Starting cache flushing\"); signal_timer_disable(); Add:\n#ifdef ENABLE_ITEMSHOP UpdateItemshopTable(); UpdatePromotionTables(); #endif Search:\nDWORD dwPacketSize = sizeof(DWORD) + sizeof(BYTE) + sizeof(WORD) + sizeof(WORD) + sizeof(TMobTable) * m_vec_mobTable.size() + sizeof(WORD) + sizeof(WORD) + sizeof(TItemTable) * m_vec_itemTable.size() + sizeof(WORD) + sizeof(WORD) + sizeof(TShopTable) * m_iShopTableSize + sizeof(WORD) + sizeof(WORD) + sizeof(TSkillTable) * m_vec_skillTable.size() + sizeof(WORD) + sizeof(WORD) + sizeof(TRefineTable) * m_iRefineTableSize + Add:\n#ifdef ENABLE_ITEMSHOP sizeof(WORD) + sizeof(WORD) + sizeof(TItemshopCategoryTable) * m_iItemshopTableCategorySize + sizeof(WORD) + sizeof(WORD) + sizeof(TItemshopItemTable) * m_iItemshopTableItemSize + #endif Search:\nsys_log(0, \"sizeof(TMobTable) = %d\", sizeof(TMobTable)); sys_log(0, \"sizeof(TItemTable) = %d\", sizeof(TItemTable)); sys_log(0, \"sizeof(TShopTable) = %d\", sizeof(TShopTable)); sys_log(0, \"sizeof(TSkillTable) = %d\", sizeof(TSkillTable)); sys_log(0, \"sizeof(TRefineTable) = %d\", sizeof(TRefineTable)); Add:\n#ifdef ENABLE_ITEMSHOP sys_log(0, \"sizeof(TItemshopCategoryTable) = %d\", sizeof(TItemshopCategoryTable)); sys_log(0, \"sizeof(TItemshopItemTable) = %d\", sizeof(TItemshopItemTable)); #endif Search:\npeer-\u003eEncodeWORD(sizeof(TSkillTable)); peer-\u003eEncodeWORD(m_vec_skillTable.size()); peer-\u003eEncode(\u0026m_vec_skillTable[0], sizeof(TSkillTable) * m_vec_skillTable.size()); peer-\u003eEncodeWORD(sizeof(TRefineTable)); peer-\u003eEncodeWORD(m_iRefineTableSize); peer-\u003eEncode(m_pRefineTable, sizeof(TRefineTable) * m_iRefineTableSize); Add:\n#ifdef ENABLE_ITEMSHOP peer-\u003eEncodeWORD(sizeof(TItemshopCategoryTable)); peer-\u003eEncodeWORD(m_iItemshopTableCategorySize); peer-\u003eEncode(m_pItemshopTableCategories, sizeof(TItemshopCategoryTable) * m_iItemshopTableCategorySize); peer-\u003eEncodeWORD(sizeof(TItemshopItemTable)); peer-\u003eEncodeWORD(m_iItemshopTableItemSize); peer-\u003eEncode(m_pItemshopTableItems, sizeof(TItemshopItemTable) * m_iItemshopTableItemSize); #endif Search:\ncase HEADER_GD_RELOAD_PROTO: QUERY_RELOAD_PROTO(); break; Add:\n#ifdef ENABLE_ITEMSHOP case HEADER_GD_RELOAD_ITEMSHOP: QUERY_RELOAD_ITEMSHOP(); break; case HEADER_GD_BUY_ITEMSHOP: ItemshopCheckBuy(peer, dwHandle, (TItemshopCheckBuy*)data); break; case HEADER_GD_PROMOTION_REDEEM: RedeemPromotionCode(peer, dwHandle, (TPromotionRedeem*)data); break; #endif Search:\nif (!(thecore_heart-\u003epulse % (thecore_heart-\u003epasses_per_sec * 5))) { Add:\n#ifdef ENABLE_ITEMSHOP UpdateItemshopTable(); UpdatePromotionTables(); #endif Add to end of file:\n#ifdef ENABLE_ITEMSHOP void CClientManager::QUERY_RELOAD_ITEMSHOP() { UpdateItemshopTable(); UpdatePromotionTables(); if (!InitializePromotionCodes()) { sys_err(\"InitializePromotionCodes FAILED\"); return; } if (!InitializeRedeemedPromotionCodes()) { sys_err(\"InitializeRedeemedPromotionCodes FAILED\"); return; } if (!InitializeItemshopSpecialOffers()) { sys_err(\"InitializeItemshopSpecialOffers FAILED\"); return; } if (!InitializeItemshopCategoryTable()) { sys_err(\"InitializeItemshopCategoryTable FAILED\"); return; } if (!InitializeItemshopItemTable()) { sys_err(\"InitializeItemshopItemTable FAILED\"); return; } for (TPeerList::iterator i = m_peerList.begin(); i != m_peerList.end(); ++i) { CPeer* tmp = *i; if (!tmp-\u003eGetChannel() || tmp == m_pkAuthPeer) continue; tmp-\u003eEncodeHeader(HEADER_DG_RELOAD_ITEMSHOP, 0, sizeof(WORD) + sizeof(WORD) + sizeof(TItemshopCategoryTable) * m_iItemshopTableCategorySize + sizeof(TItemshopItemTable) * m_iItemshopTableItemSize ); tmp-\u003eEncode(\u0026m_iItemshopTableCategorySize, sizeof(WORD)); tmp-\u003eEncode(\u0026m_iItemshopTableItemSize, sizeof(WORD)); tmp-\u003eEncode(m_pItemshopTableCategories, sizeof(TItemshopCategoryTable) * m_iItemshopTableCategorySize); tmp-\u003eEncode(m_pItemshopTableItems, sizeof(TItemshopItemTable) * m_iItemshopTableItemSize); } } void CClientManager::ItemshopCheckBuy(CPeer* pkPeer, DWORD dwHandle, TItemshopCheckBuy* p) { TItemshopBuyAnswer answer; auto it = m_ItemshopItems.find(p-\u003ehash); if (it != m_ItemshopItems.end()) { if (it-\u003esecond.second.llLimitCount == -1) { answer.canBuy = true; answer.wCount = p-\u003ewCount; strlcpy(answer.code, p-\u003ehash, sizeof(answer.code)); pkPeer-\u003eEncodeHeader(HEADER_DG_BUY_ITEMSHOP_ITEM, dwHandle, sizeof(TItemshopBuyAnswer)); pkPeer-\u003eEncode(\u0026answer, sizeof(TItemshopBuyAnswer)); return; } else if (it-\u003esecond.second.llLimitCount \u003e 0) { answer.canBuy = true; strlcpy(answer.code, p-\u003ehash, sizeof(answer.code)); it-\u003esecond.second.llLimitCount--; // NOTE: limite item buy count 1 -\u003e Change here if needed answer.wCount = 1; // Increase count for flush m_map_ItemshopLimitCountFlush[p-\u003ehash].first = it-\u003esecond.first; m_map_ItemshopLimitCountFlush[p-\u003ehash].second++; pkPeer-\u003eEncodeHeader(HEADER_DG_BUY_ITEMSHOP_ITEM, dwHandle, sizeof(TItemshopBuyAnswer)); pkPeer-\u003eEncode(\u0026answer, sizeof(TItemshopBuyAnswer)); if (it-\u003esecond.second.llLimitCount == 0) { RemoveSingleItemshopItem(it-\u003esecond.first); } else { for (auto\u0026 item : m_ItemshopItems) { if (!strcmp(item.second.second.hash, p-\u003ehash)) { item.second.second.llLimitCount = it-\u003esecond.second.llLimitCount; for (TPeerList::iterator i = m_peerList.begin(); i != m_peerList.end(); ++i) { CPeer* tmp = *i; if (!tmp-\u003eGetChannel() || tmp == m_pkAuthPeer) continue; tmp-\u003eEncodeHeader(HEADER_DG_REFRESH_ITEMSHOP_SINGLE_ITEM, 0, sizeof(TItemshopItemTable)); tmp-\u003eEncode(\u0026item.second.second, sizeof(TItemshopItemTable)); } break; } } } return; } } answer.canBuy = false; pkPeer-\u003eEncodeHeader(HEADER_DG_BUY_ITEMSHOP_ITEM, dwHandle, sizeof(TItemshopBuyAnswer)); pkPeer-\u003eEncode(\u0026answer, sizeof(TItemshopBuyAnswer)); } void CClientManager::RemoveSingleItemshopItem(long long llItemIndex) { for (const auto\u0026 item : m_ItemshopItems) { if (item.second.first != llItemIndex) continue; for (unsigned int i = 0; i \u003c m_vec_itemshopSpecialOfferItems.size(); i++) { if (m_vec_itemshopSpecialOfferItems[i].llItemIndex == llItemIndex) { m_vec_itemshopSpecialOfferItems.erase(m_vec_itemshopSpecialOfferItems.begin() + i); break; } } for (TPeerList::iterator i = m_peerList.begin(); i != m_peerList.end(); ++i) { CPeer* tmp = *i; if (!tmp-\u003eGetChannel() || tmp == m_pkAuthPeer) continue; tmp-\u003eEncodeHeader(HEADER_DG_REMOVE_ITEMSHOP_SINGLE_ITEM, 0, sizeof(TItemshopItemTable)); tmp-\u003eEncode(\u0026item.second.second, sizeof(TItemshopItemTable)); } m_ItemshopItems.erase(item.first); break; } } void CClientManager::AddSingleItemshopItem(TItemshopItemTable* item, long long llItemIndex) { m_ItemshopItems[item-\u003ehash].first = llItemIndex; m_ItemshopItems[item-\u003ehash].second = *item; for (TPeerList::iterator i = m_peerList.begin(); i != m_peerList.end(); ++i) { CPeer* tmp = *i; if (!tmp-\u003eGetChannel() || tmp == m_pkAuthPeer) continue; tmp-\u003eEncodeHeader(HEADER_DG_ADD_ITEMSHOP_SINGLE_ITEM, 0, sizeof(TItemshopItemTable)); tmp-\u003eEncode(item, sizeof(TItemshopItemTable)); } } void CClientManager::UpdateItemshopTable() { for (const auto\u0026 item : m_map_ItemshopLimitCountFlush) { const long long llIndex = item.second.first; const long long llLimitCount = item.second.second; char query[2048]; if (llLimitCount \u003e= 0) { snprintf(query, sizeof(query), \"UPDATE itemshop.itemshop_items SET limitCount = limitCount - %lld WHERE itemIndex = %lld\", llLimitCount, llIndex); CDBManager::instance().AsyncQuery(query, SQL_ITEMSHOP); } } m_map_ItemshopLimitCountFlush.clear(); } void CClientManager::UpdatePromotionTables() { for (const auto\u0026 [key, val] : m_map_promotionCodeInfo) { char query[2048]; char escape_key[PROMOTION_CODE_MAX_LEN * 2 + 1]; CDBManager::instance().EscapeString(escape_key, key.c_str(), key.size()); snprintf(query, sizeof(query), \"UPDATE itemshop.promotion_codes SET useCount = %lld WHERE promotion_code = '%s'\", val.first, escape_key); CDBManager::instance().AsyncQuery(query, SQL_ITEMSHOP); } for (const auto\u0026 [key, val] : m_map_redeemedPromotionFlush) { char query[2048]; char escape_key[PROMOTION_CODE_MAX_LEN * 2 + 1]; CDBManager::instance().EscapeString(escape_key, val.c_str(), val.size()); snprintf(query, sizeof(query), \"INSERT itemshop.promotion_redeemed (acc_id, redeemed_code, time_redeemed) VALUES (%ld, '%s', NOW())\", key, escape_key); CDBManager::instance().AsyncQuery(query, SQL_ITEMSHOP); } m_map_redeemedPromotionFlush.clear(); } void CClientManager::RedeemPromotionCode(CPeer* pkPeer, DWORD dwHandle, TPromotionRedeem* p) { TPromotionRedeemAnswer redeem_info; for (const auto\u0026 redeemed : m_vec_redeemedPromotionCodes[p-\u003eaccID]) { if (!strcmp(redeemed.c_str(), p-\u003ecode)) { pkPeer-\u003eEncodeHeader(HEADER_DG_PROMOTION_CODE_REDEEM, dwHandle, sizeof(TPromotionRedeemAnswer)); redeem_info.byRedeemAnswer = REDEEM_ALREADY_REDEEMED; pkPeer-\u003eEncode(\u0026redeem_info, sizeof(TPromotionRedeemAnswer)); return; } } if (m_map_promotionCodeInfo.find(p-\u003ecode) != m_map_promotionCodeInfo.end() \u0026\u0026 m_map_promotionCodeInfo[p-\u003ecode].first \u003e 0) { pkPeer-\u003eEncodeHeader(HEADER_DG_PROMOTION_CODE_REDEEM, dwHandle, sizeof(TPromotionRedeemAnswer) + sizeof(TPromotionItemTable) * m_map_promotionCodeInfo[p-\u003ecode].second.size()); m_map_promotionCodeInfo[p-\u003ecode].first--; redeem_info.byRedeemAnswer = REDEEM_SUCCESS; redeem_info.reward_count = m_map_promotionCodeInfo[p-\u003ecode].second.size(); m_vec_redeemedPromotionCodes[p-\u003eaccID].push_back(p-\u003ecode); m_map_redeemedPromotionFlush.insert(std::pair(p-\u003eaccID, p-\u003ecode)); pkPeer-\u003eEncode(\u0026redeem_info, sizeof(TPromotionRedeemAnswer)); pkPeer-\u003eEncode(m_map_promotionCodeInfo[p-\u003ecode].second.data(), sizeof(TPromotionItemTable) * m_map_promotionCodeInfo[p-\u003ecode].second.size()); } else { pkPeer-\u003eEncodeHeader(HEADER_DG_PROMOTION_CODE_REDEEM, dwHandle, sizeof(TPromotionRedeemAnswer)); redeem_info.byRedeemAnswer = REDEEM_FAIL; pkPeer-\u003eEncode(\u0026redeem_info, sizeof(TPromotionRedeemAnswer)); } } #endif 2. ClientManager.h Add to end of class CClientManager:\n#ifdef ENABLE_ITEMSHOP protected: bool\tInitializeItemshopCategoryTable(); bool\tInitializeItemshopItemTable(); bool\tInitializeItemshopSpecialOffers(); bool\tInitializePromotionCodes(); bool\tInitializeRedeemedPromotionCodes(); void\tItemshopCheckBuy(CPeer* pkPeer, DWORD dwHandle, TItemshopCheckBuy* p); void\tRemoveSingleItemshopItem(long long llItemIndex); void\tAddSingleItemshopItem(TItemshopItemTable* item, long long llItemIndex); void\tRedeemPromotionCode(CPeer* pkPeer, DWORD dwHandle, TPromotionRedeem* p); void\tUpdatePromotionTables(); void\tUpdateItemshopTable(); private: void\tQUERY_RELOAD_ITEMSHOP(); int\tm_iItemshopTableCategorySize; TItemshopCategoryTable* m_pItemshopTableCategories; int\tm_iItemshopTableItemSize; TItemshopItemTable* m_pItemshopTableItems; std::vector\u003cunsigned long\u003e m_vec_usedSeeds; std::unordered_map \u003cstd::string, std::pair\u003clong long, TItemshopItemTable\u003e\u003e m_ItemshopItems; std::unordered_map \u003cstd::string, std::pair\u003cDWORD, long long\u003e\u003e m_map_ItemshopLimitCountFlush; std::vector\u003cTSpecialOfferItems\u003e\tm_vec_itemshopSpecialOfferItems; std::unordered_map\u003cstd::string, std::pair\u003clong long, std::vector\u003cTPromotionItemTable\u003e\u003e\u003e m_map_promotionCodeInfo; std::unordered_map\u003cDWORD, std::vector\u003cstd::string\u003e\u003e m_vec_redeemedPromotionCodes; std::unordered_map\u003cDWORD, std::string\u003e m_map_redeemedPromotionFlush; #endif 3. ClientManagerBoot.cpp Add:\n#ifdef ENABLE_ITEMSHOP #include \u003cboost/uuid/detail/md5.hpp\u003e #include \u003cboost/algorithm/hex.hpp\u003e #include \u003crandom\u003e std::string MD5_STRING(const boost::uuids::detail::md5::digest_type\u0026 digest) { const auto charDigest = reinterpret_cast\u003cconst char*\u003e(\u0026digest); std::string result; boost::algorithm::hex(charDigest, charDigest + sizeof(boost::uuids::detail::md5::digest_type), std::back_inserter(result)); return result; } #endif Add to end of file:\n#ifdef ENABLE_ITEMSHOP bool CClientManager::InitializePromotionCodes() { char query[2048]; snprintf(query, sizeof(query), \"SELECT \" \"CODES.useCount, \" \"CODES.promotion_code, \" \"vnum, \" \"count,\" \"socket0,\" \"socket1,\" \"socket2,\" // NOTE: Add if needed //\"socket3,\" //\"socket4,\" //\"socket5,\" \"attrtype0,\" \"attrvalue0, \" \"attrtype1,\" \"attrvalue1, \" \"attrtype2,\" \"attrvalue2, \" \"attrtype3,\" \"attrvalue3, \" \"attrtype4,\" \"attrvalue4, \" \"attrtype5,\" \"attrvalue5, \" \"attrtype6, \" \"attrvalue6 \" \"FROM \" \"itemshop.promotion_rewards AS REWARDS \" \"LEFT JOIN itemshop.promotion_codes AS CODES ON REWARDS.code_index = CODES.index \" \"WHERE \" \"REWARDS.code_index = CODES.index AND CODES.state = 'ENABLED' \" \"AND count \u003e 0\" ); std::unique_ptr\u003cSQLMsg\u003e pkMsg(CDBManager::instance().DirectQuery(query)); SQLResult* pRes = pkMsg-\u003eGet(); if (!m_map_promotionCodeInfo.empty()) { sys_log(0, \"RELOAD: itemshop offertimes\"); m_map_promotionCodeInfo.clear(); } if (!pRes-\u003euiNumRows) { return true; } MYSQL_ROW data; int col = 0; while ((data = mysql_fetch_row(pRes-\u003epSQLResult))) { TPromotionItemTable reward; col = 0; long long llPromotionUseCount; char promotion_code[PROMOTION_CODE_MAX_LEN + 1]; str_to_number(llPromotionUseCount, data[col++]); strlcpy(promotion_code, data[col++], sizeof(promotion_code)); str_to_number(reward.dwVnum, data[col++]); str_to_number(reward.wCount, data[col++]); for (int i = 0; i \u003c ITEM_SOCKET_MAX_NUM; i++) { str_to_number(reward.alSockets[i], data[col++]); } for (int i = 0; i \u003c ITEM_ATTRIBUTE_MAX_NUM; i++) { str_to_number(reward.aAttr[i].bType, data[col++]); str_to_number(reward.aAttr[i].sValue, data[col++]); } m_map_promotionCodeInfo[promotion_code].first = llPromotionUseCount; m_map_promotionCodeInfo[promotion_code].second.push_back(reward); } return true; } bool CClientManager::InitializeRedeemedPromotionCodes() { char query[2048]; snprintf(query, sizeof(query), \"SELECT \" \"acc_id, \" \"redeemed_code \" \"FROM \" \"itemshop.promotion_redeemed \" ); std::unique_ptr\u003cSQLMsg\u003e pkMsg(CDBManager::instance().DirectQuery(query)); SQLResult* pRes = pkMsg-\u003eGet(); if (!m_vec_redeemedPromotionCodes.empty()) { sys_log(0, \"RELOAD: itemshop redeemed promotion_codes\"); m_vec_redeemedPromotionCodes.clear(); } if (!pRes-\u003euiNumRows) { return true; } MYSQL_ROW data; int col = 0; while ((data = mysql_fetch_row(pRes-\u003epSQLResult))) { col = 0; DWORD accID; char code[PROMOTION_CODE_MAX_LEN + 1]; str_to_number(accID, data[col++]); strlcpy(code, data[col++], sizeof(code)); m_vec_redeemedPromotionCodes[accID].push_back(code); } return true; } bool CClientManager::InitializeItemshopSpecialOffers() { char query[2048]; snprintf(query, sizeof(query), \"SELECT \" \"itemIndex, \" \"vnum, \" \"count,\" \"ABS(price), \" \"discountPercent,\" \"limitCount, \" \"category, \" \"UNIX_TIMESTAMP(endTime),\" \"weight,\" \"socket0,\" \"socket1,\" \"socket2,\" // NOTE: Add if needed //\"socket3,\" //\"socket4,\" //\"socket5,\" \"attrtype0,\" \"attrvalue0, \" \"attrtype1,\" \"attrvalue1, \" \"attrtype2,\" \"attrvalue2, \" \"attrtype3,\" \"attrvalue3, \" \"attrtype4,\" \"attrvalue4, \" \"attrtype5,\" \"attrvalue5, \" \"attrtype6, \" \"attrvalue6, \" \"UNIX_TIMESTAMP(startTime), \" \"UNIX_TIMESTAMP(endTime), \" \"(UNIX_TIMESTAMP(NOW()) \u003e= UNIX_TIMESTAMP(startTime))\" \"FROM \" \"itemshop.itemshop_items AS ITEMS \" \"LEFT JOIN itemshop.itemshop_categories AS CATEGORY ON ITEMS.category = CATEGORY.category_index \" \"WHERE \" \"ITEMS.category = CATEGORY.category_index AND CATEGORY.category_state = 'ENABLED' \" \"AND not limitCount = 0 \" \"AND count \u003e 0 \" \"AND(\" \"(UNIX_TIMESTAMP(NOW()) \u003c UNIX_TIMESTAMP(ITEMS.endTime))\" \"AND \" \"(UNIX_TIMESTAMP(ITEMS.startTime) \u003c UNIX_TIMESTAMP(ITEMS.endTime) ))\" \"ORDER BY UNIX_TIMESTAMP(startTime)\" ); std::unique_ptr\u003cSQLMsg\u003e pkMsg(CDBManager::instance().DirectQuery(query)); SQLResult* pRes = pkMsg-\u003eGet(); if (!m_vec_itemshopSpecialOfferItems.empty()) { sys_log(0, \"RELOAD: itemshop offertimes\"); m_vec_itemshopSpecialOfferItems.clear(); } if (!pRes-\u003euiNumRows) { return true; } m_vec_itemshopSpecialOfferItems.resize(pRes-\u003euiNumRows); memset(\u0026m_vec_itemshopSpecialOfferItems[0], 0, sizeof(TSpecialOfferItems) * m_vec_itemshopSpecialOfferItems.size()); TSpecialOfferItems* specialoffer_items = \u0026m_vec_itemshopSpecialOfferItems[0]; MYSQL_ROW data; int col; while ((data = mysql_fetch_row(pRes-\u003epSQLResult))) { col = 0; // NOTE: Random number -\u003e First non unique after ~20.000 - 40.000 md5 hashes std::random_device dev; std::mt19937 rng(dev()); std::uniform_int_distribution\u003cstd::mt19937::result_type\u003e dist(1, 4294967295); unsigned long seed = dist(rng); // NOTE: To prevent duplicate hashes while (std::find(m_vec_usedSeeds.begin(), m_vec_usedSeeds.end(), seed) != m_vec_usedSeeds.end()) { seed = dist(rng); } m_vec_usedSeeds.push_back(seed); boost::uuids::detail::md5 hash; boost::uuids::detail::md5::digest_type digest; hash.process_bytes((char*)\u0026seed, sizeof(seed)); hash.get_digest(digest); strlcpy(specialoffer_items-\u003eitem.hash, MD5_STRING(digest).c_str(), sizeof(specialoffer_items-\u003eitem.hash)); str_to_number(specialoffer_items-\u003ellItemIndex, data[col++]); str_to_number(specialoffer_items-\u003eitem.dwVnum, data[col++]); str_to_number(specialoffer_items-\u003eitem.wCount, data[col++]); str_to_number(specialoffer_items-\u003eitem.ullPrice, data[col++]); str_to_number(specialoffer_items-\u003eitem.byDiscountPercent, data[col++]); str_to_number(specialoffer_items-\u003eitem.llLimitCount, data[col++]); str_to_number(specialoffer_items-\u003eitem.byCategory, data[col++]); str_to_number(specialoffer_items-\u003eitem.end_time, data[col++]); str_to_number(specialoffer_items-\u003eitem.weight, data[col++]); for (int i = 0; i \u003c ITEM_SOCKET_MAX_NUM; i++) { str_to_number(specialoffer_items-\u003eitem.alSockets[i], data[col++]); } for (int i = 0; i \u003c ITEM_ATTRIBUTE_MAX_NUM; i++) { str_to_number(specialoffer_items-\u003eitem.aAttr[i].bType, data[col++]); str_to_number(specialoffer_items-\u003eitem.aAttr[i].sValue, data[col++]); } str_to_number(specialoffer_items-\u003etimes.start_time, data[col++]); str_to_number(specialoffer_items-\u003etimes.end_time, data[col++]); str_to_number(specialoffer_items-\u003etimes.is_activ, data[col++]); ++specialoffer_items; } return true; } bool CClientManager::InitializeItemshopCategoryTable() { char query[2048]; snprintf(query, sizeof(query), \"SELECT \" \"category_index, \" \"category_name, \" \"category_icon \" \"FROM \" \"itemshop.itemshop_categories \" \"WHERE category_state = 'ENABLED'\" ); std::unique_ptr\u003cSQLMsg\u003e pkMsg(CDBManager::instance().DirectQuery(query)); SQLResult* pRes = pkMsg-\u003eGet(); if (m_pItemshopTableCategories) { sys_log(0, \"RELOAD: itemshop_categories\"); delete[] m_pItemshopTableCategories; m_pItemshopTableCategories = NULL; } if (!pRes-\u003euiNumRows) { m_iItemshopTableCategorySize = 0; m_pItemshopTableCategories = new TItemshopCategoryTable[m_iItemshopTableCategorySize]; memset(m_pItemshopTableCategories, 0, sizeof(TItemshopCategoryTable) * m_iItemshopTableCategorySize); return true; } m_iItemshopTableCategorySize = pRes-\u003euiNumRows; m_pItemshopTableCategories = new TItemshopCategoryTable[m_iItemshopTableCategorySize]; memset(m_pItemshopTableCategories, 0, sizeof(TItemshopCategoryTable) * m_iItemshopTableCategorySize); TItemshopCategoryTable* prt = m_pItemshopTableCategories; MYSQL_ROW data; while ((data = mysql_fetch_row(pRes-\u003epSQLResult))) { int col = 0; str_to_number(prt-\u003eindex, data[col++]); strlcpy(prt-\u003einfo.category, data[col++], sizeof(prt-\u003einfo.category)); strlcpy(prt-\u003einfo.icon, data[col++], sizeof(prt-\u003einfo.icon)); prt++; } return true; } bool CClientManager::InitializeItemshopItemTable() { char query[2048]; snprintf(query, sizeof(query), \"SELECT \" \"itemIndex, \" \"vnum, \" \"count,\" \"ABS(price), \" \"discountPercent,\" \"limitCount, \" \"category, \" \"UNIX_TIMESTAMP(endTime),\" \"weight,\" \"socket0,\" \"socket1,\" \"socket2,\" // NOTE: Add if needed //\"socket3,\" //\"socket4,\" //\"socket5,\" \"attrtype0,\" \"attrvalue0, \" \"attrtype1,\" \"attrvalue1, \" \"attrtype2,\" \"attrvalue2, \" \"attrtype3,\" \"attrvalue3, \" \"attrtype4,\" \"attrvalue4, \" \"attrtype5,\" \"attrvalue5, \" \"attrtype6, \" \"attrvalue6 \" \"FROM \" \"itemshop.itemshop_items AS ITEMS \" \"LEFT JOIN itemshop.itemshop_categories AS CATEGORY ON ITEMS.category = CATEGORY.category_index \" \"WHERE \" \"ITEMS.category = CATEGORY.category_index AND CATEGORY.category_state = 'ENABLED' \" \"AND not limitCount = 0 \" \"AND count \u003e 0 \" \"AND(\" \"(UNIX_TIMESTAMP(ITEMS.startTime) \u003c= 0 AND UNIX_TIMESTAMP(ITEMS.endTime) \u003c= 0) OR\" \"(UNIX_TIMESTAMP(NOW()) \u003e= UNIX_TIMESTAMP(ITEMS.startTime) AND UNIX_TIMESTAMP(NOW()) \u003c UNIX_TIMESTAMP(ITEMS.endTime))\" \")\" ); std::unique_ptr\u003cSQLMsg\u003e pkMsg(CDBManager::instance().DirectQuery(query)); SQLResult* pRes = pkMsg-\u003eGet(); m_ItemshopItems.clear(); if (m_pItemshopTableItems) { sys_log(0, \"RELOAD: itemshop_items\"); delete[] m_pItemshopTableItems; m_pItemshopTableItems = NULL; } if (!pRes-\u003euiNumRows) { m_iItemshopTableItemSize = 0; m_pItemshopTableItems = new TItemshopItemTable[m_iItemshopTableItemSize]; memset(m_pItemshopTableItems, 0, sizeof(TItemshopItemTable) * m_iItemshopTableItemSize); return true; } m_iItemshopTableItemSize = pRes-\u003euiNumRows; m_pItemshopTableItems = new TItemshopItemTable[m_iItemshopTableItemSize]; memset(m_pItemshopTableItems, 0, sizeof(TItemshopItemTable) * m_iItemshopTableItemSize); TItemshopItemTable* prt = m_pItemshopTableItems; MYSQL_ROW data; while ((data = mysql_fetch_row(pRes-\u003epSQLResult))) { int col = 0; // NOTE: Random number -\u003e First non unique after ~20.000 - 40.000 md5 hashes std::random_device dev; std::mt19937 rng(dev()); std::uniform_int_distribution\u003cstd::mt19937::result_type\u003e dist(1, 4294967295); unsigned long seed = dist(rng); // NOTE: To prevent duplicate hashes while (std::find(m_vec_usedSeeds.begin(), m_vec_usedSeeds.end(), seed) != m_vec_usedSeeds.end()) { seed = dist(rng); } m_vec_usedSeeds.push_back(seed); boost::uuids::detail::md5 hash; boost::uuids::detail::md5::digest_type digest; hash.process_bytes((char*)\u0026seed, sizeof(seed)); hash.get_digest(digest); strlcpy(prt-\u003ehash, MD5_STRING(digest).c_str(), sizeof(prt-\u003ehash)); long long llIndex; str_to_number(llIndex, data[col++]); str_to_number(prt-\u003edwVnum, data[col++]); str_to_number(prt-\u003ewCount, data[col++]); str_to_number(prt-\u003eullPrice, data[col++]); str_to_number(prt-\u003ebyDiscountPercent, data[col++]); str_to_number(prt-\u003ellLimitCount, data[col++]); str_to_number(prt-\u003ebyCategory, data[col++]); str_to_number(prt-\u003eend_time, data[col++]); str_to_number(prt-\u003eweight, data[col++]); for (int i = 0; i \u003c ITEM_SOCKET_MAX_NUM; i++) { str_to_number(prt-\u003ealSockets[i], data[col++]); } for (int i = 0; i \u003c ITEM_ATTRIBUTE_MAX_NUM; i++) { str_to_number(prt-\u003eaAttr[i].bType, data[col++]); str_to_number(prt-\u003eaAttr[i].sValue, data[col++]); } m_ItemshopItems[prt-\u003ehash].first = llIndex; m_ItemshopItems[prt-\u003ehash].second = *prt; prt++; } m_vec_usedSeeds.clear(); return true; } #endif 4. DBManager.h Search:\nSQL_PLAYER, SQL_ACCOUNT, SQL_COMMON, Add:\n#ifdef ENABLE_ITEMSHOP SQL_ITEMSHOP, #endif 5. Main.cpp Search:\nif (CConfig::instance().GetValue(\"SQL_COMMON\", line, 256)) { sscanf(line, \" %s %s %s %s %d \", szAddr, szDB, szUser, szPassword, \u0026iPort); sys_log(0, \"connecting to MySQL server (common)\"); int iRetry = 5; do { if (CDBManager::instance().Connect(SQL_COMMON, szAddr, iPort, szDB, szUser, szPassword)) { sys_log(0, \" OK\"); break; } sys_log(0, \" failed, retrying in 5 seconds\"); fprintf(stderr, \" failed, retrying in 5 seconds\"); sleep(5); } while (iRetry--); fprintf(stderr, \"Success COMMON\\n\"); } else { sys_err(\"SQL_COMMON not configured\"); return false; } Add:\n#ifdef ENABLE_ITEMSHOP if (CConfig::instance().GetValue(\"SQL_ITEMSHOP\", line, 256)) { sscanf(line, \" %s %s %s %s %d \", szAddr, szDB, szUser, szPassword, \u0026iPort); sys_log(0, \"connecting to MySQL server (itemshop)\"); int iRetry = 5; do { if (CDBManager::instance().Connect(SQL_ITEMSHOP, szAddr, iPort, szDB, szUser, szPassword)) { sys_log(0, \" OK\"); break; } sys_log(0, \" failed, retrying in 5 seconds\"); fprintf(stderr, \" failed, retrying in 5 seconds\"); sleep(5); } while (iRetry--); fprintf(stderr, \"Success ITEMSHOP\\n\"); } else { sys_err(\"SQL_ITEMSHOP not configured\"); return false; } #endif ",
    "description": "",
    "tags": null,
    "title": "DB",
    "uri": "/systems/itemshop/installation/server/db/"
  },
  {
    "content": "1. Download ETC images Download: ETC images\nUnpack into Client/pack 2. Download banner \u0026 icon images Download: banner \u0026 icon images\nUnpack into Client/pack/root/ 3. constinfo.py Add:\nif app.ENABLE_ITEMSHOP: ITEMSHOP_INFOS = [] PROMOTION_CODE_REWARDS = [] 4. game.py Search:\nonPressKeyDict[app.DIK_LALT]\t= lambda : self.ShowName() Add:\nif app.ENABLE_ITEMSHOP: onPressKeyDict[app.DIK_F9]\t= lambda : self.interface.ToggleItemshop() Add to end of file:\nif app.ENABLE_ITEMSHOP: def BINARY_UPDATE_ITEMSHOP_ITEMS(self, obj): constInfo.ITEMSHOP_INFOS = obj self.interface.ReloadItemshop() def BINARY_UPDATE_ITEMSHOP_ITEM(self, obj): self.interface.ReloadItemshopItem(obj) def BINARY_UPDATE_ITEMSHOP_COINS(self, coins): self.interface.SetCoins(coins) def BINARY_OPEN_ITEMSHOP(self): self.interface.OpenItemshop() def BINARY_REMOVE_ITEMSHOP_ITEM(self, hash): self.interface.RemoveItemshopItem(hash) def BINARY_ADD_ITEMSHOP_ITEM(self, obj): self.interface.AddItemshopItem(obj) def BINARY_PROMOTION_CODE_REWARDS(self, answer, item): constInfo.PROMOTION_CODE_REWARDS = item if item else constInfo.PROMOTION_CODE_REWARDS self.interface.StartPromotionAnimation(answer) 5. interfacemodule.py Add:\nif app.ENABLE_ITEMSHOP: import uiitemshop import net Search:\nself.wndGuild = None self.wndGuildBuilding = None self.wndAcce = None Add:\nif app.ENABLE_ITEMSHOP: self.wndItemshop = None Search:\ndef MakeInterface(self): Add above:\nif app.ENABLE_ITEMSHOP: def __MakeItemshop(self): self.wndItemshop = uiitemshop.ItemshopWindow() self.wndItemshop.Hide() Search:\nself.__MakeCubeWindow() self.__MakeCubeResultWindow() self.__MakeItemSelectWindow() Add:\nif app.ENABLE_ITEMSHOP: self.__MakeItemshop() Search:\nif self.wndDragonSoul: self.wndDragonSoul.Destroy() Add above:\nif app.ENABLE_ITEMSHOP and self.wndItemshop: self.wndItemshop.Hide() self.wndItemshop.Destroy() Search:\ndel self.wndItemSelect del self.wndAcce Add:\nif app.ENABLE_ITEMSHOP: del self.wndItemshop Search:\ndef ShowAllWindows(self): self.wndTaskBar.Show() self.wndCharacter.Show() self.wndInventory.Show() self.wndExpandedMoneyTaskBar.Show() self.wndDragonSoul.Show() self.wndDragonSoulRefine.Show() self.wndChat.Show() self.wndMiniMap.Show() Add:\nif app.ENABLE_ITEMSHOP and self.wndItemshop: self.wndItemshop.Show() Search:\ndef HideAllWindows(self): if self.wndTaskBar: self.wndTaskBar.Hide() if self.wndEnergyBar: self.wndEnergyBar.Hide() if self.wndCharacter: self.wndCharacter.Close() if self.wndInventory: self.wndInventory.Hide() Add:\nif app.ENABLE_ITEMSHOP and self.wndItemshop: self.wndItemshop.Hide() Search:\nhideWindows = filter(lambda x:x.IsShow(), hideWindows) map(lambda x:x.Hide(), hideWindows) Add above:\nif app.ENABLE_ITEMSHOP and self.wndItemshop: hideWindows += self.wndItemshop, Search:\ndef EmptyFunction(self): pass Add:\nif app.ENABLE_ITEMSHOP: def ToggleItemshop(self): if self.wndItemshop.IsShow(): self.wndItemshop.Close() else: self.wndItemshop.Open() def OpenItemshop(self): if not self.wndItemshop.IsShow(): self.wndItemshop.Open() def ReloadItemshop(self): if self.wndItemshop: self.wndItemshop.ReloadItemshop() def ReloadItemshopItem(self, item): if self.wndItemshop: self.wndItemshop.ReloadItemshopItem(item) self.wndItemshop.ReloadItemshopContainer(item) def RemoveItemshopItem(self, hash): if self.wndItemshop: self.wndItemshop.RemoveItemshopItem(hash) self.wndItemshop.RemoveItemFromItemshopContainer(hash) def AddItemshopItem(self, obj): if self.wndItemshop: self.wndItemshop.AddItemshopItem(obj) def SetCoins(self, coins): if self.wndItemshop: self.wndItemshop.SetCoins(coins) def StartPromotionAnimation(self, answer): if self.wndItemshop: self.wndItemshop.StartPromotionAnimation(answer) 6. ui.py Search:\ndef OnEndFrame(self): pass Add:\nif app.ENABLE_ITEMSHOP: def ResetFrame(self): wndMgr.ResetFrame(self.hWnd) 7. uiitemshop.py Create: uiitemshop.py\nNote: Adjust STACK_MAX = 5000 to your max stack size Note: Enable ENABLE_OTHER_TOOLTIP_FUNCTION if tooltip is not working Insert this:\n\"\"\" .oooooo. oooooo oooo ooooo ooo .oooo. d8P' `Y8b `888. .8' `888b. `8' .dP\"\"Y88b 888 `888. .8' 8 `88b. 8 ]8P' 888 `888.8' 8 `88b. 8 \u003c88b. 888 `888' 8 `88b.8 `88b. `88b ooo 888 8 `888 o. .88P `Y8bood8P' o888o o8o `8 `8bd88P' Version: Release 1.0.0 Contacts: Metin2Downloads: https://www.metin2downloads.to/cms/user/11018-cyn3/ Discord: Franky#6315 Support: Discord: https://discord.gg/sura-head Special thanks to: - Rainer\t\u003c- Design \u0026 Animations - SamaLamaDingDong\t\u003c- Code review ( Server-Source ) - \u003c\u003e\t\u003c- Mental support \"\"\" # NOTE: Python imports import ui import localeInfo import uiToolTip import constInfo import uiCommon # NOTE: Binary imports import item import net import snd import ime import wndMgr import app import player import dbg # NOTE: Extern imports from _weakref import proxy import math from random import randrange # NOTE: Only set to true if tooltip not visible ENABLE_OTHER_TOOLTIP_FUNCTION = False # NOTE: Adjust max stack size, i could send it via packet but cmon. STACK_MAX = 5000 PAGE_DEFAULT = 0 PAGE_SHOP = 1 PAGE_MAX_NUM = 2 MAX_ALPHA = 1.0 MIN_ALPHA = 0.3 BANNER_CHANGE_BY = 0.01 PROMOTION_CHANGE_BY = 0.02 IMAGE_CHANGE_TIME = 0.04 # NOTE: If category-icon has no '.' we load as item-icon else: ICON_PATH = 'itemshop/icons/' BANNER_CONTAINER = [ 'itemshop/banners/banner_1.png', 'itemshop/banners/banner_2.png' ] # NOTE: All strings you have to know about ITEMSHOP_INFO = { 'pages' : { PAGE_DEFAULT : { 'text' : 'Itemshop - Startpage', }, PAGE_SHOP : { 'text' : 'Itemshop - Shop', }, }, 'promotion_code' : { 0 : { 'text' : 'Promotion-code invalid.', 'color' : 0xffFD0803, }, 1 : { 'text' : 'Promotion code redeemed.', 'color' : 0xff4AD537, }, 2 : { 'text' : 'Promotion code already redeemed.', 'color' : 0xff6576EF, } }, 'strings' : { 'ITEM_PRICE' : '%d Coins', 'ITEMS_LEFT' : '%s left', 'BUY_QUESTION' : 'Do you really want to buy this item?' } } # NOTE: Main itemshop-window class ItemshopWindow(ui.BoardWithTitleBar): BOARD_WIDTH = 800 BOARD_HEIGHT = 553 DEFAULT_LISTBOX_ITEM_COUNT_X = 4 DEFAULT_LISTBOX_ITEM_COUNT_Y = 1 DEFAULT_LISTBOX_ITEM_HEIGHT = 136 DEFAULT_LISTBOX_ITEM_WIDTH = 185 CATEGORY_LISTBOX_ITEM_COUNT_X = 1 CATEGORY_LISTBOX_ITEM_COUNT_Y = 9 CATEGORY_LISTBOX_ITEM_HEIGHT = 49 CATEGORY_LISTBOX_ITEM_WIDTH = 162 MAIN_LISTBOX_ITEM_COUNT_X = 3 MAIN_LISTBOX_ITEM_COUNT_Y = 3 MAIN_LISTBOX_ITEM_HEIGHT = 136 MAIN_LISTBOX_ITEM_WIDTH = 185 def __init__(self): ui.BoardWithTitleBar.__init__(self) self.AddFlag('movable') self.SetSize(self.BOARD_WIDTH, self.BOARD_HEIGHT) self.SetCloseEvent(self.Close) self.ResetWindow() self.toolTip = uiToolTip.ItemToolTip() # NOTE: Create page base self.CreatePages() self.CreateDefaultPageTabs() # NOTE: Create elements for main page self.CreateBanner() self.CreateRandomItemListbox() # NOTE: Create elements for buy page self.CreateShopPageTabs() self.CreateItemListbox() self.CreateCategorysListbox() # NOTE: Promotion board self.CreatePromotionCode() # NOTE: Payment board self.CreatePaymentBoard() # NOTE: Advertise board self.CreateAdvertiseBoard() # NOTE: Top-most self.CreateUserDisplay() self.CreateCoinDisplay() self.SelectPage(PAGE_DEFAULT) self.SetCenterPosition() def __del__(self): ui.BoardWithTitleBar.__del__(self) def Destroy(self): self.ResetWindow() def ResetWindow(self): self.pages = [] self.tabs = [] self.tabBackgrounds = [] self.categorys = [] self.children = [] self.cur_category = 0 self.toolTip = None self.bannerNextImageTime = 0.0 self.bannerDecreaseAlpha = True self.bannerValue = MAX_ALPHA self.bannerIndex = 0 self.promotionNextImageTime = 0.0 self.promotionValue = MAX_ALPHA self.questionDialog = None def Open(self): self.SetTop() self.Show() def Close(self): self.OnCloseQuestionDialog() self.ResetEditLine() self.Hide() # NOTE: Set random items to landing page def SetRandomStartpageItems(self): self.randomListbox.RemoveAllItems() if not constInfo.ITEMSHOP_INFOS: return alreadyIn = [] count = 0 totalItemCount = 0 for category in constInfo.ITEMSHOP_INFOS: if 'items' in category: for items in category['items']: totalItemCount += len(items) while len(alreadyIn) \u003c self.DEFAULT_LISTBOX_ITEM_COUNT_X: if count \u003e totalItemCount: break count += 1 randomCategory = randrange(0, len(constInfo.ITEMSHOP_INFOS)) if not 'items' in constInfo.ITEMSHOP_INFOS[randomCategory]: return randomItem = constInfo.ITEMSHOP_INFOS[randomCategory]['items'][randrange(0, len(constInfo.ITEMSHOP_INFOS[randomCategory]['items']))] if randomItem['hash'] in alreadyIn: continue itemContainer = ItemSlot( randomItem, self.toolTip, self ) self.randomListbox.AppendItem(itemContainer) alreadyIn.append(randomItem['hash']) def CreatePages(self): for _ in xrange(PAGE_MAX_NUM): page = ui.Window() page.SetParent(self) page.AddFlag('not_pick') page.SetPosition(0, 30) page.SetSize(self.BOARD_WIDTH, self.BOARD_HEIGHT - 30) self.pages.append(page) def CreateDefaultPageTabs(self): tabBackground = ui.ImageBox() tabBackground.SetParent(self.pages[PAGE_DEFAULT]) tabBackground.LoadImage('d:/ymir work/ui/itemshop/base/tab_background.sub') tabBackground.SetPosition(12, 4) tabBackground.Show() self.tabBackgrounds.append(tabBackground) for i in xrange(PAGE_MAX_NUM): tab = ui.RadioButton() tab.SetParent(tabBackground) tab.SetPosition(10 + (37 + 6) * i, 9) tab.SetUpVisual('d:/ymir work/ui/itemshop/base/tab_button_up.sub') tab.SetDownVisual('d:/ymir work/ui/itemshop/base/tab_button_down.sub') tab.SetOverVisual('d:/ymir work/ui/itemshop/base/tab_button_over.sub') tab.SetEvent(lambda arg = i : self.SelectPage(arg)) tab.Show() self.tabs.append(tab) tabImage = ui.ImageBox() tabImage.SetParent(tab) tabImage.AddFlag('not_pick') tabImage.SetPosition(0, 2) tabImage.LoadImage('d:/ymir work/ui/itemshop/base/tab_image_%d.sub' % i) tabImage.SetWindowHorizontalAlignCenter() tabImage.SetWindowVerticalAlignCenter() tabImage.Show() self.children.append(tabImage) def CreateUserDisplay(self): userBackground = ui.ImageBox() userBackground.AddFlag('not_pick') userBackground.LoadImage('d:/ymir work/ui/itemshop/base/user_display_background.sub') userBackground.SetParent(self) userBackground.SetPosition(563-187, 43) userBackground.Show() self.children.append(userBackground) userText = ui.TextLine() userText.SetParent(userBackground) userText.AddFlag('not_pick') userText.SetPosition((userBackground.GetWidth() - 15) / 2, userBackground.GetHeight() / 2) userText.SetHorizontalAlignCenter() userText.SetVerticalAlignCenter() userText.SetFontName(localeInfo.UI_DEF_FONT_LARGE) userText.SetFontColor((219.0 / 255.0), (192.0 / 255.0), (174.0 / 255.0)) userText.Show() self.userText = userText def CreateCoinDisplay(self): coinBackground = ui.ImageBox() coinBackground.AddFlag('not_pick') coinBackground.LoadImage('d:/ymir work/ui/itemshop/base/coin_display_background.sub') coinBackground.SetParent(self) coinBackground.SetPosition(563, 43) coinBackground.Show() self.children.append(coinBackground) coinText = ui.TextLine() coinText.SetParent(coinBackground) coinText.AddFlag('not_pick') coinText.SetPosition(coinBackground.GetWidth() / 2, coinBackground.GetHeight() / 2) coinText.SetHorizontalAlignCenter() coinText.SetVerticalAlignCenter() coinText.SetFontName(localeInfo.UI_DEF_FONT_LARGE) coinText.SetFontColor((219.0 / 255.0), (192.0 / 255.0), (174.0 / 255.0)) coinText.Show() self.coinText = coinText def CreateBanner(self): bannerBackground = ui.ImageBox() bannerBackground.SetParent(self.pages[PAGE_DEFAULT]) bannerBackground.LoadImage('d:/ymir work/ui/itemshop/base/banner_background.sub') bannerBackground.SetPosition(12, 65) bannerBackground.Show() self.children.append(bannerBackground) bannerImage = ui.ImageBox() bannerImage.SetParent(bannerBackground) bannerImage.SetPosition(3, 3) if BANNER_CONTAINER: bannerImage.LoadImage(self.GetImage()) bannerImage.Show() self.bannerImage = bannerImage def CreateRandomItemListbox(self): randomListbox = ListBox( parent = self.pages[PAGE_DEFAULT], itemWidth = self.DEFAULT_LISTBOX_ITEM_WIDTH, itemHeight = self.DEFAULT_LISTBOX_ITEM_HEIGHT, item_count_x=self.DEFAULT_LISTBOX_ITEM_COUNT_X, item_count_y=self.DEFAULT_LISTBOX_ITEM_COUNT_Y, item_gap_x=11, item_gap_y=0, pos = (12, 228) ) self.randomListbox = randomListbox def CreateShopPageTabs(self): tabBackground = ui.ImageBox() tabBackground.SetParent(self.pages[PAGE_SHOP]) tabBackground.LoadImage('d:/ymir work/ui/itemshop/base/tab_background.sub') tabBackground.SetPosition(12, 4) tabBackground.Show() self.tabBackgrounds.append(tabBackground) tab = ui.Button() tab.SetParent(tabBackground) tab.SetPosition(10, 9) tab.SetUpVisual('d:/ymir work/ui/itemshop/base/tab_button_up.sub') tab.SetDownVisual('d:/ymir work/ui/itemshop/base/tab_button_down.sub') tab.SetOverVisual('d:/ymir work/ui/itemshop/base/tab_button_over.sub') tab.SetEvent(lambda : self.SelectPage(PAGE_DEFAULT)) tab.Show() self.children.append(tab) tabImage = ui.ImageBox() tabImage.SetParent(tab) tabImage.AddFlag('not_pick') tabImage.SetPosition(0, 2) tabImage.LoadImage('d:/ymir work/ui/itemshop/base/tab_image_back.sub') tabImage.SetWindowHorizontalAlignCenter() tabImage.SetWindowVerticalAlignCenter() tabImage.Show() self.children.append(tabImage) def CreateItemListbox(self): listboxBackground = ui.ImageBox() listboxBackground.SetParent(self.pages[PAGE_SHOP]) listboxBackground.LoadImage('d:/ymir work/ui/itemshop/base/item_listbox_background.sub') listboxBackground.SetPosition(190, 65) listboxBackground.Show() self.children.append(listboxBackground) scrollBar = ScrollBar( parent = listboxBackground, width = 8, height = listboxBackground.GetHeight()-3, pos = (listboxBackground.GetWidth()-8, 1), color = 'red' ) self.scrollBar = scrollBar listbox = ListBox( parent = self.pages[PAGE_SHOP], itemWidth = self.MAIN_LISTBOX_ITEM_WIDTH, itemHeight = self.MAIN_LISTBOX_ITEM_HEIGHT, item_count_x = self.MAIN_LISTBOX_ITEM_COUNT_X, item_count_y = self.MAIN_LISTBOX_ITEM_COUNT_Y, item_gap_x = 12, item_gap_y = 12, pos = (194, 69), scrollBar = self.scrollBar ) self.listbox = listbox editlineBackground = ui.ImageBox() editlineBackground.AddFlag('not_pick') editlineBackground.LoadImage('d:/ymir work/ui/itemshop/base/editline_background.sub') editlineBackground.SetParent(self.tabBackgrounds[PAGE_SHOP]) editlineBackground.SetPosition(53, 9) editlineBackground.Show() self.children.append(editlineBackground) editLine = EditLine( event = self.__OnType ) editLine.SetParent(editlineBackground) editLine.SetPosition(35, 7) editLine.SetEscapeEvent(lambda : [self.Close()]) editLine.SetSize(editlineBackground.GetWidth() - 38, editlineBackground.GetHeight() - 10) editLine.SetMax(24) editLine.SetFontName(localeInfo.UI_DEF_FONT_LARGE) editLine.SetFontColor((219.0 / 255.0), (192.0 / 255.0), (174.0 / 255.0)) editLine.Show() self.editLine = editLine def CreateCategorysListbox(self): categoryListboxBackground = ui.ImageBox() categoryListboxBackground.SetParent(self.pages[PAGE_SHOP]) categoryListboxBackground.LoadImage('d:/ymir work/ui/itemshop/base/category_listbox_background.sub') categoryListboxBackground.SetPosition(12, 65) categoryListboxBackground.Show() self.children.append(categoryListboxBackground) categoryScrollBar = ScrollBar( parent = categoryListboxBackground, width = 8, height = categoryListboxBackground.GetHeight() - 3, pos = (categoryListboxBackground.GetWidth() - 8, 1), color = 'blue', ) self.categoryScrollBar = categoryScrollBar categoryListbox = ListBox( parent = self.pages[PAGE_SHOP], itemWidth = self.CATEGORY_LISTBOX_ITEM_WIDTH, itemHeight = self.CATEGORY_LISTBOX_ITEM_HEIGHT, item_count_y = self.CATEGORY_LISTBOX_ITEM_COUNT_Y, item_count_x = self.CATEGORY_LISTBOX_ITEM_COUNT_X, item_gap_x = 0, item_gap_y = 0, pos = (12, 65), scrollBar = self.categoryScrollBar ) self.categoryListbox = categoryListbox def CreatePromotionCode(self): promotionCodeBackground = ui.ImageBox() promotionCodeBackground.SetParent(self.pages[PAGE_DEFAULT]) promotionCodeBackground.LoadImage('d:/ymir work/ui/itemshop/base/promotion_background.sub') promotionCodeBackground.SetPosition(12, 379) promotionCodeBackground.Show() self.children.append(promotionCodeBackground) promotionCodeEditlineBackground = ui.ImageBox() promotionCodeEditlineBackground.AddFlag('not_pick') promotionCodeEditlineBackground.LoadImage('d:/ymir work/ui/itemshop/base/promotion_editline.sub') promotionCodeEditlineBackground.SetParent(promotionCodeBackground) promotionCodeEditlineBackground.SetWindowHorizontalAlignCenter() promotionCodeEditlineBackground.SetWindowVerticalAlignCenter() promotionCodeEditlineBackground.SetPosition(0, 32) promotionCodeEditlineBackground.Show() self.children.append(promotionCodeEditlineBackground) promotionCodeEditLine = EditLine( event = None, ) promotionCodeEditLine.SetParent(promotionCodeEditlineBackground) promotionCodeEditLine.SetPosition(6, 6) promotionCodeEditLine.SetEscapeEvent(lambda : [self.Close()]) promotionCodeEditLine.SetSize(promotionCodeEditlineBackground.GetWidth() - 7, promotionCodeEditlineBackground.GetHeight() - 7) promotionCodeEditLine.SetMax(24) promotionCodeEditLine.SetFontName(localeInfo.UI_DEF_FONT_LARGE) promotionCodeEditLine.SetFontColor((219.0 / 255.0), (192.0 / 255.0), (174.0 / 255.0)) promotionCodeEditLine.Show() self.promotionCodeEditLine = promotionCodeEditLine promotionCodeButton = ui.Button() promotionCodeButton.SetParent(promotionCodeBackground) promotionCodeButton.SetWindowHorizontalAlignCenter() promotionCodeButton.SetWindowVerticalAlignCenter() promotionCodeButton.SetUpVisual('d:/ymir work/ui/itemshop/base/promotion_redeem_button_up.sub') promotionCodeButton.SetDownVisual('d:/ymir work/ui/itemshop/base/promotion_redeem_button_down.sub') promotionCodeButton.SetOverVisual('d:/ymir work/ui/itemshop/base/promotion_redeem_button_over.sub') promotionCodeButton.SetEvent(self.SendPromotionCode) promotionCodeButton.SetPosition(145, 32) promotionCodeButton.Show() self.promotionCodeButton = promotionCodeButton promotionItemImage = ui.ImageBox() promotionItemImage.SetParent(promotionCodeBackground) promotionItemImage.SetWindowVerticalAlignCenter() promotionItemImage.SetPosition(45, 0) promotionItemImage.Hide() self.promotionItemImage = promotionItemImage promotionItemCount = ui.TextLine() promotionItemCount.SetParent(self.promotionItemImage) promotionItemCount.SetWindowVerticalAlignBottom() promotionItemCount.SetWindowHorizontalAlignRight() promotionItemCount.SetPosition(15, 15) promotionItemCount.Show() self.promotionItemCount = promotionItemCount promotionItemAnimation = ui.AniImageBox() promotionItemAnimation.SetParent(promotionCodeBackground) promotionItemAnimation.SetPosition(26, 19) promotionItemAnimation.OnEndFrame = self.OnEndFrame promotionItemAnimation.AddFlag('not_pick') promotionItemAnimation.SetDelay(1) for i in xrange(240): promotionItemAnimation.AppendImage('d:/ymir work/ui/itemshop/animation/promotion/%05d.png' % i) self.promotionItemAnimation = promotionItemAnimation promotionAnswerText = ui.TextLine() promotionAnswerText.SetParent(promotionCodeBackground) promotionAnswerText.SetWindowVerticalAlignBottom() promotionAnswerText.SetPosition(109, 17) promotionAnswerText.Show() self.promotionAnswerText = promotionAnswerText def CreatePaymentBoard(self): paymentBoard = ui.ImageBox() paymentBoard.SetParent(self.pages[PAGE_DEFAULT]) paymentBoard.LoadImage('d:/ymir work/ui/itemshop/base/payment_background.sub') paymentBoard.SetPosition(445, 379) paymentBoard.Show() self.children.append(paymentBoard) def CreateAdvertiseBoard(self): advertiseBoard = ui.ImageBox() advertiseBoard.SetParent(self.pages[PAGE_DEFAULT]) advertiseBoard.LoadImage('d:/ymir work/ui/itemshop/base/hyperlink_background.sub') advertiseBoard.SetPosition(600, 379) advertiseBoard.Show() self.children.append(advertiseBoard) def GetImage(self): if len(BANNER_CONTAINER) \u003c= self.bannerIndex: self.bannerIndex = 0 return BANNER_CONTAINER[self.bannerIndex] def OnUpdate(self): for item in self.listbox.GetItems(): item.OnUpdate() if BANNER_CONTAINER and not self.bannerNextImageTime \u003e app.GetTime(): if self.bannerDecreaseAlpha: self.bannerValue -= BANNER_CHANGE_BY if self.bannerValue \u003c MIN_ALPHA: self.bannerDecreaseAlpha = False self.bannerIndex += 1 self.bannerImage.LoadImage(self.GetImage()) else: self.bannerValue += BANNER_CHANGE_BY if self.bannerValue \u003e MAX_ALPHA: self.bannerDecreaseAlpha = True self.bannerNextImageTime = app.GetTime() + IMAGE_CHANGE_TIME self.bannerImage.SetAlpha(self.bannerValue) if self.promotionItemImage.IsShow() and not self.promotionNextImageTime \u003e app.GetTime(): if self.promotionValue \u003c MAX_ALPHA: self.promotionValue += PROMOTION_CHANGE_BY self.promotionNextImageTime = app.GetTime() + IMAGE_CHANGE_TIME self.promotionItemImage.SetAlpha(MINMAX(0.0, self.promotionValue, 1.0)) def StartPromotionAnimation(self, answer): self.promotionCodeEditLine.SetText('') self.promotionAnswerText.SetText(ITEMSHOP_INFO['promotion_code'][answer]['text']) self.promotionAnswerText.SetPackedFontColor(ITEMSHOP_INFO['promotion_code'][answer]['color']) self.promotionAnswerText.Show() if answer != 1: return self.promotionItemAnimation.ResetFrame() self.OnEndFrame() def OnEndFrame(self): if not constInfo.PROMOTION_CODE_REWARDS: self.promotionItemAnimation.Hide() self.promotionItemImage.Hide() return reward = constInfo.PROMOTION_CODE_REWARDS[0] item.SelectItem(reward['vnum']) self.promotionItemImage.LoadImage(item.GetIconImageFileName()) self.promotionValue = 0.0 self.promotionItemImage.SetAlpha(self.promotionValue) self.promotionItemCount.SetText(str(reward['count']) if reward['count'] \u003e 1 else '') self.promotionItemImage.Show() self.promotionItemAnimation.Show() constInfo.PROMOTION_CODE_REWARDS.remove(reward) def SendPromotionCode(self): code = self.promotionCodeEditLine.GetText() net.SendRedeemPromotionCodePacket(code) def LoadCategorys(self): self.categoryListbox.RemoveAllItems() for i, content in enumerate(constInfo.ITEMSHOP_INFOS): contentButton = CategoryButton(content, i) contentButton.SetOnMouseLeftButtonUpEvent(lambda arg = i : self.SelectCategory(arg)) self.categoryListbox.AppendItem(contentButton) if self.categoryListbox.GetItemCountX() * self.categoryListbox.GetItemCountY() \u003c self.categoryListbox.GetItemCount(): self.categoryScrollBar.SetMiddleBarSize(float(self.categoryListbox.GetItemCountX() * self.categoryListbox.GetItemCountY())/self.categoryListbox.GetItemCount()) self.categoryScrollBar.SetPos(0) self.categoryScrollBar.Show() else: self.categoryScrollBar.Hide() if self.cur_category \u003e= len(constInfo.ITEMSHOP_INFOS): self.cur_category = 0 def SelectCategory(self, category): if self.toolTip: self.toolTip.HideToolTip() self.listbox.RemoveAllItems() if not constInfo.ITEMSHOP_INFOS: return self.categoryListbox.GetItems()[self.cur_category].SetUp() self.cur_category = category self.categoryListbox.GetItems()[self.cur_category].SetDown() searchText = self.editLine.GetText() for i, itemObjects in enumerate(constInfo.ITEMSHOP_INFOS): if i == category or searchText: itemObjects = itemObjects['items'] for itemObject in itemObjects: vnum = itemObject['vnum'] item.SelectItem(vnum) name = item.GetItemName() if not searchText.lower() in name.lower(): continue itemContainer = ItemSlot( itemObject, self.toolTip, self ) self.listbox.AppendItem(itemContainer) if self.listbox.GetItemCountX() * self.listbox.GetItemCountY() \u003c self.listbox.GetItemCount(): self.scrollBar.SetMiddleBarSize(float(self.listbox.GetItemCountX() * self.listbox.GetItemCountY()) / self.listbox.GetItemCount()) self.scrollBar.SetPos(0) self.scrollBar.Show() else: self.scrollBar.Hide() def SelectPage(self, num): self.ResetEditLine() for page in self.pages: page.Hide() for tab in self.tabs: tab.Enable() tab.SetUp() self.pages[num].Show() self.tabs[num].Disable() self.tabs[num].Down() self.SetTitleName(ITEMSHOP_INFO['pages'][num]['text']) def ResetEditLine(self): self.editLine.KillFocus() self.promotionCodeEditLine.KillFocus() for item in self.listbox.GetItems(): item.ResetEditLine() for item in self.randomListbox.GetItems(): item.ResetEditLine() def __OnType(self): self.SelectCategory(self.cur_category) def ReloadItemshop(self): self.LoadCategorys() self.SelectCategory(self.cur_category) self.SetRandomStartpageItems() def ReloadItemshopItem(self, item): for category in constInfo.ITEMSHOP_INFOS: for i, olditem in enumerate(category['items']): if olditem['hash'] == item['hash']: category['items'][i] = item return def ReloadItemshopContainer(self, item): for slot in self.randomListbox.GetItems(): if slot.GetHash() == item['hash']: slot.LoadItemData(item) break for slot in self.listbox.GetItems(): if slot.GetHash() == item['hash']: slot.LoadItemData(item) return def RemoveItemshopItem(self, hash): for i, category in enumerate(constInfo.ITEMSHOP_INFOS): for j, olditem in enumerate(category['items']): if olditem['hash'] == hash: del category['items'][j] if not category['items']: del constInfo.ITEMSHOP_INFOS[i] self.ReloadItemshop() return def RemoveItemFromItemshopContainer(self, hash): for slot in self.randomListbox.GetItems(): if slot.GetHash() == hash: self.SetRandomStartpageItems() break for slot in self.listbox.GetItems(): if slot.GetHash() == hash: slot.Hide() self.listbox.RemoveItem(slot) return def AddItemshopItem(self, obj): for category in constInfo.ITEMSHOP_INFOS: if obj['index'] == category['index']: category['items'][0:0] = [obj['items'][0]] self.SelectCategory(self.cur_category) return constInfo.ITEMSHOP_INFOS[0:0] = [obj] self.ReloadItemshop() def SetCoins(self, coins): self.coinText.SetText('\u003c %s \u003e' % localeInfo.NumberToDecimalString(coins)) self.userText.SetText('\u003c %s \u003e' % player.GetMainCharacterName()) def RequestBuyItem(self, hash, count): self.questionDialog = uiCommon.QuestionDialog() self.questionDialog.SetText(ITEMSHOP_INFO['strings']['BUY_QUESTION']) self.questionDialog.SetAcceptEvent(lambda hash = hash, count = count : self.__RequestBuyItemQuestionDialog_OnAccept(hash, count)) self.questionDialog.SetCancelEvent(self.__RequestBuyItemQuestionDialog_OnCancel) self.questionDialog.Open() constInfo.SET_ITEM_QUESTION_DIALOG_STATUS(1) def __RequestBuyItemQuestionDialog_OnAccept(self, hash, count): net.SendBuyItemshopItemPacket(hash, count) self.OnCloseQuestionDialog() def __RequestBuyItemQuestionDialog_OnCancel(self): self.OnCloseQuestionDialog() def OnCloseQuestionDialog(self): if not self.questionDialog: return self.questionDialog.Close() self.questionDialog = None constInfo.SET_ITEM_QUESTION_DIALOG_STATUS(0) def OnPressEscapeKey(self): self.Close() return True def OnPressExitKey(self): self.Close() return True # NOTE: CategoryButton class class CategoryButton(ui.ImageBox): def __init__(self, content, index ): ui.ImageBox.__init__(self) self.LoadImage('d:/ymir work/ui/itemshop/base/category_slot_%d.sub' % (index % 2)) text = ui.TextLine() text.SetParent(self) text.SetText(content['category']) text.SetPosition(55, 0) text.AddFlag('not_pick') text.SetWindowVerticalAlignCenter() text.SetSize(text.GetTextSize()[0], text.GetTextSize()[1]) text.Show() self.text = text slot = ui.ImageBox() slot.SetParent(self) slot.AddFlag('not_pick') slot.LoadImage('d:/ymir work/ui/itemshop/base/category_overlay.sub') slot.SetPosition(-9, -9) self.slot = slot image = ui.ImageBox() image.SetParent(self) image.AddFlag('not_pick') icon_image = ICON_PATH + content['icon'] if content['icon'].find('.') == -1: item.SelectItem(int(content['icon'])) icon_image = item.GetIconImageFileName() image.LoadImage(icon_image) image.SetPosition(29 - image.GetWidth() / 2, 24 - image.GetHeight() / 2) image.Show() self.image = image def __del__(self): ui.ImageBox.__del__(self) def SetUp(self): self.slot.Hide() def SetDown(self): self.slot.Show() class ItemSlot(ui.ImageBox): def __init__(self, item_info, toolTip, parent = None ): ui.ImageBox.__init__(self) self.LoadImage('d:/ymir work/ui/itemshop/base/itemslot.sub') self.itemVnum = item_info['vnum'] self.metinSlot = item_info['sockets'] self.attrSlot = item_info['attr'] self.price = item_info['price'] self.hash = item_info['hash'] self.count = item_info['count'] self.discount = item_info['discount'] self.limitCount = item_info['limitCount'] self.endTime = item_info['endTime'] self.toolTip = toolTip self.parent = proxy(parent) if parent else None if not ENABLE_OTHER_TOOLTIP_FUNCTION: self.SAFE_SetStringEvent('MOUSE_OVER_IN', self.ShowToolTip) self.SAFE_SetStringEvent('MOUSE_OVER_OUT', self.HideToolTip) item.SelectItem(int(self.itemVnum)) self.CreateSpecialOfferElements() self.CreateDiscountElements() self.CreateLimitedCountElements() self.CreateEditline() self.CreateButtons() self.CreateImage() self.CreateItemName() self.CreateFancyCorner() if self.discount: self.discountImage.Show() self.discountPriceText.Show() if self.limitCount \u003e 0: self.limitedCountImage.Show() self.limitedCountBackground.Show() if self.endTime: self.specialOfferCoutdown.Show() self.specialOfferBackground.Show() self.UpdatePriceValue() def __del__(self): ui.ImageBox.__del__(self) if self.toolTip: self.toolTip.HideToolTip() self.toolTip = None self.specialOfferBackground = None self.buttonText = None self.buyButton = None self.icon = None self.discountImage = None self.parent = None if ENABLE_OTHER_TOOLTIP_FUNCTION: def OnMouseOverIn(self): self.ShowToolTip() def OnMouseOverOut(self): self.HideToolTip() # NOTE: We just use this to reload items def LoadItemData(self, item_info): self.itemVnum = item_info['vnum'] self.metinSlot = item_info['sockets'] self.attrSlot = item_info['attr'] self.price = item_info['price'] self.hash = item_info['hash'] self.count = item_info['count'] self.discount = item_info['discount'] self.limitCount = item_info['limitCount'] self.endTime = item_info['endTime'] item.SelectItem(int(self.itemVnum)) if self.discount: self.discountImage.Show() self.discountPriceText.Show() else: self.discountImage.Hide() self.discountPriceText.Hide() if self.limitCount \u003e 0: self.limitedCountImage.Show() self.limitedCountBackground.Show() else: self.limitedCountImage.Hide() self.limitedCountBackground.Hide() if self.endTime: self.specialOfferCoutdown.Show() self.specialOfferBackground.Show() else: self.specialOfferCoutdown.Hide() self.specialOfferBackground.Hide() self.icon.LoadImage(item.GetIconImageFileName()) self.itemNameText.SetText(item.GetItemName()) self.UpdatePriceValue() def ShowToolTip(self): if self.toolTip: # TODO: Create SetItemshop item with extra info self.toolTip.ClearToolTip() self.toolTip.AddItemData(self.itemVnum, self.metinSlot, self.attrSlot) def HideToolTip(self): if self.toolTip: self.toolTip.HideToolTip() def GetHash(self): return self.hash def CreateEditline(self): editlineBackground = ui.ImageBox() editlineBackground.AddFlag('not_pick') editlineBackground.LoadImage('d:/ymir work/ui/itemshop/base/small_editline_background.sub') editlineBackground.SetParent(self) editlineBackground.SetWindowHorizontalAlignCenter() editlineBackground.SetWindowVerticalAlignBottom() editlineBackground.SetPosition(31, 62) editlineBackground.Show() self.editlineBackground = editlineBackground editLine = EditLine( event = self.UpdatePriceValue ) editLine.SetParent(self.editlineBackground) editLine.SetPosition(1, 0) editLine.SetEscapeEvent(lambda : editLine.KillFocus()) editLine.SetWindowHorizontalAlignCenter() editLine.SetSize(self.editlineBackground.GetWidth() - 1, self.editlineBackground.GetHeight()) editLine.SetMax(len(str(STACK_MAX))) editLine.SetNumberMode() editLine.SetFontColor((219.0 / 255.0), (192.0 / 255.0), (174.0 / 255.0)) editLine.SetText('1') editLine.Show() self.editLine = editLine def CreateButtons(self): buyButton = ui.ImageBox() buyButton.SetParent(self) buyButton.LoadImage('d:/ymir work/ui/itemshop/base/buy_button.sub') buyButton.SetPosition(30, 45) buyButton.SetWindowVerticalAlignBottom() buyButton.SetWindowHorizontalAlignCenter() buyButton.SetOnMouseLeftButtonUpEvent(self.RequestBuyItem) buyButton.Show() self.buyButton = buyButton buttonText = ui.TextLine() buttonText.SetParent(self.buyButton) buttonText.AddFlag('not_pick') buttonText.SetFontName(localeInfo.UI_DEF_FONT_LARGE) buttonText.SetPackedFontColor(0xffdad3c9) buttonText.SetHorizontalAlignCenter() buttonText.SetVerticalAlignCenter() buttonText.SetWindowHorizontalAlignCenter() buttonText.SetWindowVerticalAlignCenter() buttonText.Show() self.buttonText = buttonText coinIcon = ui.ImageBox() coinIcon.SetParent(self.buttonText) coinIcon.AddFlag('not_pick') coinIcon.LoadImage('d:/ymir work/ui/itemshop/base/coin_icon.sub') coinIcon.Show() self.coinIcon = coinIcon increaseButton = ui.Button() increaseButton.SetParent(self) increaseButton.SetPosition(62, 62) increaseButton.SetWindowHorizontalAlignCenter() increaseButton.SetWindowVerticalAlignBottom() increaseButton.SetUpVisual('d:/ymir work/ui/itemshop/base/increase_button_up.sub') increaseButton.SetDownVisual('d:/ymir work/ui/itemshop/base/increase_button_down.sub') increaseButton.SetOverVisual('d:/ymir work/ui/itemshop/base/increase_button_over.sub') increaseButton.SetEvent(self.IncreaseValue) self.increaseButton = increaseButton decreaseButton = ui.Button() decreaseButton.SetParent(self) decreaseButton.SetPosition(-2, 62) decreaseButton.SetWindowHorizontalAlignCenter() decreaseButton.SetWindowVerticalAlignBottom() decreaseButton.SetUpVisual('d:/ymir work/ui/itemshop/base/decrease_button_up.sub') decreaseButton.SetDownVisual('d:/ymir work/ui/itemshop/base/decrease_button_down.sub') decreaseButton.SetOverVisual('d:/ymir work/ui/itemshop/base/decrease_button_over.sub') decreaseButton.SetEvent(self.DecreaseValue) self.decreaseButton = decreaseButton def ResetEditLine(self): self.editLine.KillFocus() def RequestBuyItem(self): self.parent.RequestBuyItem(self.hash, self.buyCount) def IncreaseValue(self): self.editLine.SetText(str(self.editLine.GetTextAsValue(1)+1)) self.UpdatePriceValue() def DecreaseValue(self): self.editLine.SetText(str(self.editLine.GetTextAsValue(1)-1)) self.UpdatePriceValue() def UpdatePriceValue(self): number = MINMAX(1, int(self.editLine.GetTextAsValue(1)), int(STACK_MAX / self.count)) self.editLine.SetText(str(number)) item.SelectItem(self.itemVnum) if item.IsAntiFlag(item.ITEM_ANTIFLAG_STACK) or not item.IsFlag(item.ITEM_FLAG_STACKABLE) or self.limitCount \u003e 0: self.increaseButton.Hide() self.decreaseButton.Hide() self.editlineBackground.Hide() elif number \u003e= int(STACK_MAX / self.count): self.increaseButton.Hide() self.decreaseButton.Show() elif number \u003c= 1: self.decreaseButton.Hide() self.increaseButton.Show() else: self.increaseButton.Show() self.decreaseButton.Show() self.editlineBackground.Show() self.buyCount = number self.buttonText.SetText( '%d' % ( max(1, self.price - (self.price * self.discount / 100) ) * self.buyCount ) ) if self.discount: self.discountPriceText.SetText( ITEMSHOP_INFO['strings']['ITEM_PRICE'] % (self.price * self.buyCount) ) self.discountPriceText.SetSize(self.discountPriceText.GetTextSize()[0], self.discountPriceText.GetTextSize()[1]) line = '' for _ in xrange(len(self.discountPriceText.GetText())): line += '_' self.discountPriceOverlay.SetText(line) self.coinIcon.SetPosition(-(self.buttonText.GetTextSize()[0] / 2 + 14), -3) self.limitedCountText.SetText(ITEMSHOP_INFO['strings']['ITEMS_LEFT'] % localeInfo.NumberToDecimalString(self.limitCount)) def CreateImage(self): icon = ui.ExpandedImageBox() icon.SetParent(self) icon.AddFlag('not_pick') icon.LoadImage(item.GetIconImageFileName()) icon.SetPosition(40, 0) icon.SetWindowVerticalAlignCenter() icon.Show() self.icon = icon def CreateItemName(self): itemNameText = ui.TextLine() itemNameText.SetParent(self) itemNameText.AddFlag('not_pick') itemNameText.SetFontColor((219.0 / 255.0), (192.0 / 255.0), (174.0 / 255.0)) itemNameText.SetText(item.GetItemName() if self.count \u003c= 1 else item.GetItemName() + ' (x%d)' % self.count ) itemNameText.SetHorizontalAlignCenter() itemNameText.SetWindowHorizontalAlignCenter() itemNameText.SetPosition(0, 15) itemNameText.Show() self.itemNameText = itemNameText def CreateSpecialOfferElements(self): specialOfferBackground = ui.AniImageBox() specialOfferBackground.SetParent(self) specialOfferBackground.SetPosition(3, 3) specialOfferBackground.AddFlag('not_pick') specialOfferBackground.SetDelay(1) for i in xrange(120): specialOfferBackground.AppendImage('d:/ymir work/ui/itemshop/animation/hotoffer/%05d.png' % i) self.specialOfferBackground = specialOfferBackground specialOfferCoutdown = ui.TextLine() specialOfferCoutdown.SetParent(self) specialOfferCoutdown.AddFlag('not_pick') specialOfferCoutdown.SetHorizontalAlignCenter() specialOfferCoutdown.SetWindowVerticalAlignBottom() specialOfferCoutdown.SetWindowHorizontalAlignCenter() specialOfferCoutdown.SetFontColor((219.0 / 255.0), (192.0 / 255.0), (174.0 / 255.0)) specialOfferCoutdown.SetPosition(30, 77) self.specialOfferCoutdown = specialOfferCoutdown def CreateFancyCorner(self): fancyCorner = ui.ImageBox() fancyCorner.SetParent(self) fancyCorner.AddFlag('not_pick') fancyCorner.LoadImage('d:/ymir work/ui/itemshop/base/itemslot_right_bottom.sub') fancyCorner.SetPosition(fancyCorner.GetWidth(), fancyCorner.GetHeight()) fancyCorner.SetWindowHorizontalAlignRight() fancyCorner.SetWindowVerticalAlignBottom() fancyCorner.Show() self.fancyCorner = fancyCorner def CreateDiscountElements(self): discountImage = ui.ImageBox() discountImage.SetParent(self) discountImage.AddFlag('not_pick') discountImage.LoadImage('d:/ymir work/ui/itemshop/base/badge_sale.sub') discountImage.SetPosition(discountImage.GetWidth() + 3, 3) discountImage.SetWindowHorizontalAlignRight() self.discountImage = discountImage discountPriceText = ui.TextLine() discountPriceText.SetParent(self) discountPriceText.AddFlag('not_pick') discountPriceText.SetPosition(30, 20) discountPriceText.SetPackedFontColor(0xff69210e) discountPriceText.SetWindowVerticalAlignBottom() discountPriceText.SetWindowHorizontalAlignCenter() self.discountPriceText = discountPriceText discountPriceOverlay = ui.TextLine() discountPriceOverlay.SetParent(self.discountPriceText) discountPriceOverlay.AddFlag('not_pick') discountPriceOverlay.SetPosition(0, -5) discountPriceOverlay.SetPackedFontColor(0xff69210e) discountPriceOverlay.Show() self.discountPriceOverlay = discountPriceOverlay def CreateLimitedCountElements(self): limitedCountImage = ui.ImageBox() limitedCountImage.SetParent(self) limitedCountImage.SetPosition(3, 3) limitedCountImage.AddFlag('not_pick') limitedCountImage.LoadImage('d:/ymir work/ui/itemshop/base/badge_limitedcount.sub') self.limitedCountImage = limitedCountImage limitedCountBackground = ui.ImageBox() limitedCountBackground.SetParent(self) limitedCountBackground.AddFlag('not_pick') limitedCountBackground.LoadImage('d:/ymir work/ui/itemshop/base/limitedcount_background.sub') limitedCountBackground.SetWindowVerticalAlignBottom() limitedCountBackground.SetPosition(2, 16) self.limitedCountBackground = limitedCountBackground limitedCountText = ui.TextLine() limitedCountText.SetParent(self.limitedCountBackground) limitedCountText.AddFlag('not_pick') limitedCountText.SetFontColor((194.0 / 255.0), (186.0 / 255.0), (174.0 / 255.0)) limitedCountText.SetPosition(2, 1) limitedCountText.Show() self.limitedCountText = limitedCountText def OnUpdate(self): if self.endTime: diff = self.endTime - app.GetUNIX() hours = diff / 3600 minutes = diff / 60 % 60 seconds = diff % 60 self.specialOfferCoutdown.SetText('%d:%02d:%02d' % (hours, minutes, seconds)) class MiddleBar(ui.DragButton): def __init__(self, width, height, move_event, wheel_event, color, ): ui.DragButton.__init__(self) self.AddFlag('movable') self.MakeImage(color) self.SetSize(width, height) self.SetMoveEvent(move_event) self.SetOnMouseWheel(wheel_event) self.Show() def MakeImage(self, color): top = ui.ImageBox() top.SetParent(self) top.LoadImage('d:/ymir work/ui/itemshop/base/scrollbar_middle_%s.tga' % color) top.SetPosition(0, 0) top.AddFlag('not_pick') top.Show() middle = ui.ExpandedImageBox() middle.SetParent(self) middle.LoadImage('d:/ymir work/ui/itemshop/base/scrollbar_middle_%s.tga' % color) middle.SetPosition(0, 4) middle.AddFlag('not_pick') middle.Show() bottom = ui.ImageBox() bottom.SetParent(self) bottom.LoadImage('d:/ymir work/ui/itemshop/base/scrollbar_middle_%s.tga' % color) bottom.AddFlag('not_pick') bottom.Show() self.top = top self.bottom = bottom self.middle = middle def SetSize(self, width, height): width = min(10, width) height = max(12, height) ui.DragButton.SetSize(self, width, height) self.bottom.SetPosition(0, height-4) height -= 4*3 self.middle.SetRenderingRect(0, 0, 0, float(height)/4.0) def SetOnMouseWheel(self, onMouseWheel): self.OnMouseWheel = onMouseWheel class ScrollBar(ui.Window): SCROLLBAR_MIDDLE_WIDTH = 6 SCROLLBAR_MIDDLE_HEIGHT = 4 def __init__(self, parent, width, height, pos, color, ): ui.Window.__init__(self) self.ResetWindow() self.SetParent(parent) self.SetSize(width, height) self.SetPosition(pos[0], pos[1]) self.CreateScrollBar(color) self.SetScrollBarHeight(height) self.Show() def __del__(self): ui.Window.__del__(self) self.ResetWindow() def ResetWindow(self): self.pageSize = 1 self.curPos = 0.0 self.eventScroll = lambda *arg: None self.scrollStep = 0.21 def CreateScrollBar(self, color): barSlot = ui.Bar3D() barSlot.SetParent(self) barSlot.AddFlag('not_pick') barSlot.Show() self.barSlot = barSlot import weakref scrollBarWeakRef = weakref.ref(self) def OnMouseWheel(nLen): scrollBar = scrollBarWeakRef() if scrollBar: if nLen \u003e 0: scrollBar.OnUp() else: scrollBar.OnDown() middleBar = MiddleBar( width = self.SCROLLBAR_MIDDLE_WIDTH, height = self.SCROLLBAR_MIDDLE_HEIGHT, move_event = ui.__mem_func__(self.OnMove), wheel_event = OnMouseWheel, color = color, ) middleBar.SetParent(self) self.middleBar = middleBar def Destroy(self): self.middleBar = None self.eventScroll = lambda *arg: None def SetScrollEvent(self, event): self.eventScroll = event def SetMiddleBarSize(self, pageScale): self.SCROLLBAR_MIDDLE_HEIGHT = int(pageScale * float(self.GetHeight())) self.middleBar.SetSize(self.SCROLLBAR_MIDDLE_WIDTH, self.SCROLLBAR_MIDDLE_HEIGHT) self.pageSize = self.GetHeight() - self.SCROLLBAR_MIDDLE_HEIGHT def SetScrollBarHeight(self, height): self.pageSize = height - self.SCROLLBAR_MIDDLE_HEIGHT self.middleBar.SetRestrictMovementArea(0, 0, 0, height) self.UpdateBarSlot() def UpdateBarSlot(self): self.barSlot.SetPosition(0, 0) self.barSlot.SetSize(self.GetWidth()-2, self.GetHeight()) def GetPos(self): return self.curPos def SetPos(self, pos): pos = max(0.0, pos) pos = min(1.0, pos) newPos = float(self.pageSize) * pos self.middleBar.SetPosition(0, int(newPos)) self.OnMove() def SetScrollStep(self, step): self.scrollStep = step def GetScrollStep(self): return self.scrollStep def OnMouseWheel(self, nLen): if nLen \u003e 0: self.OnUp() else: self.OnDown() def OnUp(self): self.SetPos(self.curPos-self.scrollStep) def OnDown(self): self.SetPos(self.curPos+self.scrollStep) def OnMove(self): if 0 == self.pageSize: return (xLocal, yLocal) = self.middleBar.GetLocalPosition() self.curPos = float(yLocal) / float(self.pageSize) self.eventScroll() def OnMouseLeftButtonDown(self): (xMouseLocalPosition, yMouseLocalPosition) = self.GetMouseLocalPosition() pickedPos = yMouseLocalPosition - self.SCROLLBAR_MIDDLE_HEIGHT/2 newPos = float(pickedPos) / float(self.pageSize) self.SetPos(newPos) class ListBox(ui.Window): def __init__(self, parent, itemWidth, itemHeight, item_count_x, item_count_y, item_gap_x, item_gap_y, pos, scrollBar = None ): ui.Window.__init__(self) self.itemWidth = itemWidth self.itemHeight = itemHeight self.item_count_x = item_count_x self.item_count_y = item_count_y self.item_gap_x = item_gap_x self.item_gap_y = item_gap_y self.ResetWindow() self.SetParent(parent) self.SetPosition(pos[0], pos[1]) if scrollBar: self.SetScrollBar(scrollBar) self.__UpdateSize() self.Show() def __del__(self): ui.Window.__del__(self) self.ResetWindow() def ResetWindow(self): self.basePos = 0 self.itemList = [] self.scrollBar = None def __UpdateSize(self): self.SetSize((self.itemWidth + self.item_gap_x) * self.item_count_x - self.item_gap_x, (self.itemHeight + self.item_gap_y) * self.item_count_y - self.item_gap_y) def SetBasePos(self, basePos): self.basePos=basePos for pos, newItem in enumerate(self.itemList): newItem.Hide() if self.__IsInViewRange(pos): (x, y) = self.GetItemViewCoord(pos) newItem.SetPosition(x, y) newItem.Show() def RemoveItem(self, item): self.itemList.remove(item) self.SetBasePos(self.basePos) def RemoveAllItems(self): for item in self.itemList: item.Hide() item.Destroy() del item self.itemList=[] self.SetBasePos(0) if self.scrollBar: self.scrollBar.Hide() def AppendItem(self, newItem): newItem.SetParent(self) newItem.SetSize(self.itemWidth, self.itemHeight) newItem.OnMouseWheel = self.OnMouseWheel pos=len(self.itemList) if self.__IsInViewRange(pos): (x, y)=self.GetItemViewCoord(pos) newItem.SetPosition(x, y) newItem.Show() else: newItem.Hide() self.itemList.append(newItem) def OnMouseWheel(self, nLen): if self.scrollBar: self.scrollBar.OnMouseWheel(nLen) def SetScrollBar(self, scrollBar): scrollBar.SetScrollEvent(ui.__mem_func__(self.__OnScroll)) self.scrollBar=scrollBar def GetItemCountY(self): return self.item_count_y def GetItemCountX(self): return self.item_count_x def GetItems(self): return self.itemList def GetItemCount(self): return len(self.itemList) def GetItemViewCoord(self, pos): return (pos % self.item_count_x * (self.itemWidth + self.item_gap_x), math.floor( (pos-self.basePos) / float(self.item_count_x) ) * (self.itemHeight + self.item_gap_y) ) def __OnScroll(self): self.SetBasePos(int(self.scrollBar.GetPos() * self.__GetScrollLen()) * self.item_count_x) def __GetScrollLen(self): scrollLen = math.ceil((self.GetItemCount() - (self.item_count_x * self.item_count_y)) / float(self.item_count_x)) if scrollLen \u003c 0: return 0 return scrollLen def __IsInViewRange(self, pos): if pos \u003c self.basePos: return False if pos \u003e= self.basePos + (self.item_count_y * self.item_count_x): return False return True class EditLine(ui.EditLine): def __init__(self, event ): ui.EditLine.__init__(self) self.eventOnType = event if event else ui.Window.NoneMethod def __del__(self): ui.EditLine.__del__(self) self.eventOnType = ui.Window.NoneMethod def GetTextAsValue(self, default): return default if ui.TextLine.GetText(self) == '' else int(ui.TextLine.GetText(self)) def OnIMEUpdate(self): snd.PlaySound('sound/ui/type.wav') imeText = ime.GetText(self.bCodePage) oldText = ui.TextLine.GetText(self) ui.TextLine.SetText(self, imeText) if not imeText == oldText: self.eventOnType() # NOTE: Global functions def MINMAX(min, value, max): if value \u003c min: value = min if value \u003e max: value = max return value ",
    "description": "",
    "tags": null,
    "title": "Client",
    "uri": "/systems/itemshop/installation/binary/client/"
  },
  {
    "content": "1. char.cpp Add:\n#ifdef ENABLE_ITEMSHOP #include \"itemshop.h\" #endif Search:\nvoid CHARACTER::Initialize() Add to the end of this function:\n#ifdef ENABLE_ITEMSHOP m_iItemshopCooldownTime = 0; m_iPromotionCodeCooldownTime = 0; #endif Add to end of file:\n#ifdef ENABLE_ITEMSHOP void CHARACTER::SendPromotionRewardPacket(BYTE byAnswer, std::vector\u003cTPromotionItemTable\u003e items) { TEMP_BUFFER buf; TPacketGCItemshopInfo itemshop_info; itemshop_info.header = HEADER_GC_ITEMSHOP; itemshop_info.subheader = SUBHEADER_PROMOTION_CODE_REWARDS; buf.write(\u0026itemshop_info, sizeof(TPacketGCItemshopInfo)); buf.write(\u0026byAnswer, sizeof(BYTE)); size_t size = items.size(); buf.write(\u0026size, sizeof(size_t)); buf.write(items.data(), sizeof(TPromotionItemTable) * size); GetDesc()-\u003ePacket(buf.read_peek(), buf.size()); } void CHARACTER::SendItemshopSingleItemRefreshPacket(TItemshopItemTable* item) { TEMP_BUFFER buf; TPacketGCItemshopInfo itemshop_info; itemshop_info.header = HEADER_GC_ITEMSHOP; itemshop_info.subheader = SUBHEADER_ITEMSHOP_REFRESH_SINGLE_ITEM; buf.write(\u0026itemshop_info, sizeof(TPacketGCItemshopInfo)); buf.write(item, sizeof(TItemshopItemTable)); GetDesc()-\u003ePacket(buf.read_peek(), buf.size()); } void CHARACTER::SendItemshopSingleItemRemovePacket(TItemshopItemTable* item) { TEMP_BUFFER buf; TPacketGCItemshopInfo itemshop_info; itemshop_info.header = HEADER_GC_ITEMSHOP; itemshop_info.subheader = SUBHEADER_ITEMSHOP_REMOVE_SINGLE_ITEM; buf.write(\u0026itemshop_info, sizeof(TPacketGCItemshopInfo)); buf.write(item, sizeof(TItemshopItemTable)); GetDesc()-\u003ePacket(buf.read_peek(), buf.size()); } void CHARACTER::SendItemshopSingleItemAddPacket(TItemshopItemTable* item, TItemshopCategoryInfo category) { TEMP_BUFFER buf; TPacketGCItemshopInfo itemshop_info; itemshop_info.header = HEADER_GC_ITEMSHOP; itemshop_info.subheader = SUBHEADER_ITEMSHOP_ADD_SINGLE_ITEM; buf.write(\u0026itemshop_info, sizeof(TPacketGCItemshopInfo)); buf.write(\u0026category, sizeof(TItemshopCategoryInfo)); buf.write(item, sizeof(TItemshopItemTable)); GetDesc()-\u003ePacket(buf.read_peek(), buf.size()); } void CHARACTER::SendItemshopItemsPacket(const std::unordered_map \u003cBYTE, std::vector\u003cTItemshopItemTable\u003e\u003e items, const std::unordered_map \u003cBYTE, TItemshopCategoryInfo\u003e categories) { SendItemshopCoinPacket(); TEMP_BUFFER buf; TPacketGCItemshopInfo itemshop_info; itemshop_info.header = HEADER_GC_ITEMSHOP; itemshop_info.subheader = SUBHEADER_ITEMSHOP_REFRESH_ITEMS; buf.write(\u0026itemshop_info, sizeof(TPacketGCItemshopInfo)); TPacketGCitemshopCategorySize itemshop_categorie_size; itemshop_categorie_size.size = categories.size(); buf.write(\u0026itemshop_categorie_size, sizeof(TPacketGCitemshopCategorySize)); for (const auto\u0026 [key, val] : categories) { buf.write(\u0026key, sizeof(BYTE)); buf.write(\u0026val, sizeof(TItemshopCategoryInfo)); } TPacketGCItemshopItemSize itemshop_item_size; itemshop_item_size.size = items.size(); buf.write(\u0026itemshop_item_size, sizeof(TPacketGCItemshopItemSize)); size_t temp = 0; for (const auto\u0026 [key, vec] : items) { buf.write(\u0026key, sizeof(BYTE)); temp = vec.size(); buf.write(\u0026temp, sizeof(size_t)); buf.write(vec.data(), sizeof(TItemshopItemTable) * temp); } GetDesc()-\u003ePacket(buf.read_peek(), buf.size()); } void CHARACTER::SendItemshopCoinPacket() { const TAccountTable\u0026 accTable = GetDesc()-\u003eGetAccountTable(); unsigned long long ulltotalCoins = 0; std::unique_ptr\u003cSQLMsg\u003e pkMsg(DBManager::instance().DirectQuery(\"SELECT coins from account.account WHERE id = %ld\", accTable.id)); SQLResult* pRes = pkMsg-\u003eGet(); if (pRes-\u003euiNumRows \u003e 0) { MYSQL_ROW data = mysql_fetch_row(pRes-\u003epSQLResult); str_to_number(ulltotalCoins, data[0]); } TEMP_BUFFER buf; TPacketGCItemshopInfo itemshop_info; itemshop_info.header = HEADER_GC_ITEMSHOP; itemshop_info.subheader = SUBHEADER_ITEMSHOP_REFRESH_COINS; buf.write(\u0026itemshop_info, sizeof(TPacketGCItemshopInfo)); buf.write(\u0026ulltotalCoins, sizeof(unsigned long long)); GetDesc()-\u003ePacket(buf.read_peek(), buf.size()); } #endif 2. char.h Add to end of class CHARACTER :\n#ifdef ENABLE_ITEMSHOP public: void\tSendItemshopItemsPacket( const std::unordered_map \u003cBYTE, std::vector\u003cTItemshopItemTable\u003e\u003e items, const std::unordered_map \u003cBYTE, TItemshopCategoryInfo\u003e categories ); void\tSendPromotionRewardPacket(BYTE byAnswer, std::vector\u003cTPromotionItemTable\u003e); void\tSendItemshopSingleItemRefreshPacket(TItemshopItemTable* item); void\tSendItemshopSingleItemRemovePacket(TItemshopItemTable* item); void\tSendItemshopSingleItemAddPacket(TItemshopItemTable* item, TItemshopCategoryInfo category); void\tSendItemshopCoinPacket(); bool\tCanUseItemshop() const { return m_iItemshopCooldownTime \u003c thecore_pulse(); } void\tSetItemshopCooldown(int pulse) { m_iItemshopCooldownTime = pulse; } bool\tCanUsePromotionCode() const { return m_iPromotionCodeCooldownTime \u003c thecore_pulse(); } void\tSetPromotionCodedown(int pulse) { m_iPromotionCodeCooldownTime = pulse; } protected: int\tm_iItemshopCooldownTime; int\tm_iPromotionCodeCooldownTime; #endif 3. character_manager.cpp Add:\n#ifdef ENABLE_ITEMSHOP #include \"itemshop.h\" #endif Add to end of file:\n#ifdef ENABLE_ITEMSHOP void CHARACTER_MANAGER::SendItemshopSingleRemoveItem(TItemshopItemTable* item) { for (const auto\u0026 [player_id, ch] : m_map_pkChrByPID) { if (!ch) continue; ch-\u003eSendItemshopSingleItemRemovePacket(item); } } void CHARACTER_MANAGER::SendItemshopSingleAddItem(TItemshopItemTable* item) { const auto\u0026 categories = CItemshopManager::instance().GetItemshopCategories(); const auto\u0026 category_info = categories.find(item-\u003ebyCategory); if (category_info == categories.end()) { // This could NEVER happen but it seems like it does return; } for (const auto\u0026 [player_id, ch] : m_map_pkChrByPID) { if (!ch) continue; ch-\u003eSendItemshopSingleItemAddPacket(item, category_info-\u003esecond); } } void CHARACTER_MANAGER::SendItemshopSingleItemRefresh(TItemshopItemTable* item) { for (const auto\u0026 [player_id, ch] : m_map_pkChrByPID) { if (!ch) continue; ch-\u003eSendItemshopSingleItemRefreshPacket(item); } } void CHARACTER_MANAGER::SendItemshopItems() { const auto\u0026 items = CItemshopManager::instance().GetItemshopItems(); const auto\u0026 categories = CItemshopManager::instance().GetItemshopCategories(); for (const auto\u0026 [player_id, ch] : m_map_pkChrByPID) { if (!ch) continue; ch-\u003eSendItemshopItemsPacket(items, categories); } } #endif 4. character_manager.cpp Add to end of class CHARACTER_MANAGER:\n#ifdef ENABLE_ITEMSHOP public: void\tSendItemshopSingleRemoveItem(TItemshopItemTable* item); void\tSendItemshopSingleAddItem(TItemshopItemTable* item); void\tSendItemshopSingleItemRefresh(TItemshopItemTable* item); void\tSendItemshopItems(); #endif 5. cmd_gm.cpp Search:\ncase 'p': ch-\u003eChatPacket(CHAT_TYPE_INFO, \"Reloading prototype tables,\"); db_clientdesc-\u003eDBPacket(HEADER_GD_RELOAD_PROTO, 0, NULL, 0); break; Add:\n#ifdef ENABLE_ITEMSHOP case 'i': ch-\u003eChatPacket(CHAT_TYPE_INFO, \"Reloading itemshop tables,\"); db_clientdesc-\u003eDBPacket(HEADER_GD_RELOAD_ITEMSHOP, 0, NULL, 0); break; #endif 6. input.h Search:\nvoid\tRefine(LPCHARACTER ch, const char* c_pData); Add:\n#ifdef ENABLE_ITEMSHOP void\tBuyItemshopItem(LPCHARACTER ch, const char* c_pData); void\tRedeemPromotionCode(LPCHARACTER ch, const char* c_pData); #endif Search:\nprotected: DWORD\tm_dwHandle; Add:\n#ifdef ENABLE_ITEMSHOP protected: void\tReloadItemshop(const char* c_pData); void\tItemshopBuyAnswer(LPDESC d, const char* c_pData); void\tRedeemPromotionCode(LPDESC d, const char* c_pData); #endif 7. input_db.cpp Add:\n#ifdef ENABLE_ITEMSHOP #include \"itemshop.h\" #endif Search:\nif (decode_2bytes(data) != sizeof(TRefineTable)) { sys_err(\"refine table size error\"); thecore_shutdown(); return; } data += 2; size = decode_2bytes(data); data += 2; sys_log(0, \"BOOT: REFINE: %d\", size); if (size) { CRefineManager::instance().Initialize((TRefineTable*) data, size); data += size * sizeof(TRefineTable); } Add:\n#ifdef ENABLE_ITEMSHOP if (decode_2bytes(data) != sizeof(TItemshopCategoryTable)) { sys_err(\"itemshop table category size error\"); thecore_shutdown(); return; } data += 2; size = decode_2bytes(data); data += 2; sys_log(0, \"BOOT: ITEMSHOP: %d\", size); if (size) { CItemshopManager::instance().InitializeCategories((TItemshopCategoryTable*)data, size); data += size * sizeof(TItemshopCategoryTable); } if (decode_2bytes(data) != sizeof(TItemshopItemTable)) { sys_err(\"itemshop item table size error\"); thecore_shutdown(); return; } data += 2; size = decode_2bytes(data); data += 2; sys_log(0, \"BOOT: ITEMSHOP: %d\", size); if (size) { CItemshopManager::instance().InitializeItems((TItemshopItemTable*)data, size); data += size * sizeof(TItemshopItemTable); } #endif Search:\ncase HEADER_DG_RELOAD_PROTO: ReloadProto(c_pData); break; Add:\n#ifdef ENABLE_ITEMSHOP case HEADER_DG_RELOAD_ITEMSHOP: ReloadItemshop(c_pData); break; case HEADER_DG_REFRESH_ITEMSHOP_SINGLE_ITEM: CItemshopManager::instance().RefreshSingleItem((TItemshopItemTable*)c_pData); break; case HEADER_DG_REMOVE_ITEMSHOP_SINGLE_ITEM: CItemshopManager::instance().RemoveSingleItem((TItemshopItemTable*)c_pData); break; case HEADER_DG_ADD_ITEMSHOP_SINGLE_ITEM: CItemshopManager::instance().AddSingleItem((TItemshopItemTable*)c_pData); break; case HEADER_DG_BUY_ITEMSHOP_ITEM: ItemshopBuyAnswer(DESC_MANAGER::instance().FindByHandle(m_dwHandle), c_pData); break; case HEADER_DG_PROMOTION_CODE_REDEEM: RedeemPromotionCode(DESC_MANAGER::instance().FindByHandle(m_dwHandle), c_pData); break; #endif Add to end of file:\n#ifdef ENABLE_ITEMSHOP void CInputDB::ItemshopBuyAnswer(LPDESC d, const char* c_pData) { if (!d) return; if (!d-\u003eGetCharacter()) return; TItemshopBuyAnswer* buy_answer = (TItemshopBuyAnswer*)c_pData; LPCHARACTER ch = d-\u003eGetCharacter(); if (buy_answer-\u003ecanBuy) { CItemshopManager::instance().BuyItem(ch, buy_answer-\u003ecode, buy_answer-\u003ewCount); } else { ch-\u003eChatPacket(CHAT_TYPE_INFO, \"cannot buy\"); } } void CInputDB::RedeemPromotionCode(LPDESC d, const char* c_pData) { if (!d) return; if (!d-\u003eGetCharacter()) return; TPromotionRedeemAnswer* redeem_answer = (TPromotionRedeemAnswer*)c_pData; LPCHARACTER ch = d-\u003eGetCharacter(); std::vector \u003cTPromotionItemTable\u003e itemsGiven; if (redeem_answer-\u003ebyRedeemAnswer == REDEEM_SUCCESS) { TPromotionItemTable* rewards = (TPromotionItemTable*)(c_pData + sizeof(TPromotionRedeemAnswer)); for (int i = 0; i \u003c redeem_answer-\u003ereward_count; ++i, ++rewards) { const TItemTable* item_table = ITEM_MANAGER::instance().GetTable(rewards-\u003edwVnum); if (item_table) { // NOTE: Stupid admin i guess if (rewards-\u003ewCount \u003e 1 \u0026\u0026 ((IS_SET(item_table-\u003edwAntiFlags, ITEM_ANTIFLAG_STACK)) || !(IS_SET(item_table-\u003edwFlags, ITEM_FLAG_STACKABLE)))) rewards-\u003ewCount = 1; } LPITEM item = ITEM_MANAGER::instance().CreateItem(rewards-\u003edwVnum, rewards-\u003ewCount); if (!item) { ch-\u003eChatPacket(CHAT_TYPE_INFO, \"item does not exist, contact SA for free coins :)\"); return; } bool forcedSockets = false; if (rewards-\u003ealSockets[0]) { for (int i = 0; i \u003c ITEM_LIMIT_MAX_NUM; i++) { if (LIMIT_REAL_TIME == item-\u003eGetLimitType(i)) { // NOTE: We set socket0 as time value, but only if socket is set so we still can use default times in createitem item-\u003eSetSocket(0, time(0) + rewards-\u003ealSockets[0]); // NOTE: We dont have to start realtime event because createitem does forcedSockets = true; } else if (LIMIT_TIMER_BASED_ON_WEAR == item-\u003eGetLimitType(i)) { // NOTE: We force socket0 if set item-\u003eSetSocket(0, rewards-\u003ealSockets[0]); forcedSockets = true; } } } // NOTE: I dont have systems where i need to set multible sockets in createitem but you can still do: /* for(const auto\u0026 socket : itemInfo.alSockets){ if (socket) { Funny socket method here } } */ if (!forcedSockets) item-\u003eSetSockets(rewards-\u003ealSockets); // NOTE: You can adjust this if you want to use bAlterToMagicItemPct item-\u003eSetAttributes(rewards-\u003eaAttr); ch-\u003eAutoGiveItem(item); itemsGiven.push_back(*rewards); } } ch-\u003eSendPromotionRewardPacket(redeem_answer-\u003ebyRedeemAnswer, itemsGiven); } void CInputDB::ReloadItemshop(const char* c_pData) { WORD* category_size = (WORD*)c_pData; c_pData += sizeof(WORD); WORD* item_size = (WORD*)c_pData; c_pData += sizeof(WORD); CItemshopManager::instance().InitializeCategories((TItemshopCategoryTable*)c_pData, *category_size); c_pData += sizeof(TItemshopCategoryTable) * (*category_size); CItemshopManager::instance().InitializeItems((TItemshopItemTable*)c_pData, *item_size); c_pData += sizeof(TItemshopItemTable) * (*item_size); CHARACTER_MANAGER::instance().SendItemshopItems(); } #endif 8. input_login.cpp Add:\n#ifdef ENABLE_ITEMSHOP #include \"itemshop.h\" #endif Search:\nvoid CInputLogin::Entergame(LPDESC d, const char * data) Add to end of this function:\n#ifdef ENABLE_ITEMSHOP ch-\u003eSendItemshopItemsPacket(CItemshopManager::instance().GetItemshopItems(), CItemshopManager::instance().GetItemshopCategories()); #endif 9. input_main.cpp Add:\n#ifdef ENABLE_ITEMSHOP #include \"itemshop.h\" #endif Search:\ncase HEADER_CG_ACCE: { if ((iExtraLen = AcceRefine(ch, c_pData, m_iBufferLeft)) \u003c 0) { return -1; } } break; Add:\n#ifdef ENABLE_ITEMSHOP case HEADER_CG_BUY_ITEMSHOP_ITEM: { BuyItemshopItem(ch, c_pData); } break; case HEADER_CG_PROMOTION: { RedeemPromotionCode(ch, c_pData); } break; #endif Add to end of file:\n#ifdef ENABLE_ITEMSHOP void CInputMain::BuyItemshopItem(LPCHARACTER ch, const char* c_pData) { const TPacketCGBuyItemshopItem* p = reinterpret_cast\u003cconst TPacketCGBuyItemshopItem*\u003e(c_pData); if (CItemshopManager::instance().CanBuyItem(ch, p-\u003ehash, p-\u003ewCount)) { TItemshopCheckBuy p_gd; strlcpy(p_gd.hash, p-\u003ehash, sizeof(p_gd.hash)); p_gd.wCount = p-\u003ewCount; db_clientdesc-\u003eDBPacket(HEADER_GD_BUY_ITEMSHOP, ch-\u003eGetDesc()-\u003eGetHandle(), \u0026p_gd, sizeof(p_gd)); } } void CInputMain::RedeemPromotionCode(LPCHARACTER ch, const char* c_pData) { if (!ch-\u003eCanUsePromotionCode()) { ch-\u003eChatPacket(CHAT_TYPE_INFO, LC_TEXT(\"You have to wait 10 seconds after using promotion codes.\")); return; } ch-\u003eSetPromotionCodedown(thecore_pulse() + PASSES_PER_SEC(10)); const TPacketCGRedeemPromotionCode* p = reinterpret_cast\u003cconst TPacketCGRedeemPromotionCode*\u003e(c_pData); // We dont have to check but atleast we dont send gd -\u003e dg -\u003e gc if (!strcmp(p-\u003epromotion_code, \"\")) return; TPromotionRedeem gd_p; strlcpy(gd_p.code, p-\u003epromotion_code, sizeof(gd_p.code)); gd_p.accID = ch-\u003eGetAID(); db_clientdesc-\u003eDBPacket(HEADER_GD_PROMOTION_REDEEM, ch-\u003eGetDesc()-\u003eGetHandle(), \u0026gd_p, sizeof(gd_p)); } #endif 10. main.cpp Add:\n#ifdef ENABLE_ITEMSHOP #include \"itemshop.h\" #endif Search:\nCRefineManager\trefine_manager; Add:\n#ifdef ENABLE_ITEMSHOP CItemshopManager itemshop_manager; #endif 11. packet.h Search:\nHEADER_GC_TIME_SYNC\t= 0xfc, HEADER_GC_PHASE\t= 0xfd, Add above:\n#ifdef ENABLE_ITEMSHOP HEADER_CG_BUY_ITEMSHOP_ITEM\t= 240, HEADER_CG_PROMOTION\t= 241, #endif Search:\nHEADER_GG_LOGIN\t= 1, Add above:\n#ifdef ENABLE_ITEMSHOP HEADER_GC_ITEMSHOP = 240, #endif Add to the end of file before #pragma pack():\n#ifdef ENABLE_ITEMSHOP typedef struct SPacketGCitemshopCategorySize { DWORD size; } TPacketGCitemshopCategorySize; typedef struct SPacketGCItemshopItemSize { DWORD size; } TPacketGCItemshopItemSize; typedef struct SPacketGCItemshopInfo { BYTE header; DWORD subheader; } TPacketGCItemshopInfo; enum { SUBHEADER_ITEMSHOP_REFRESH_ITEMS, SUBHEADER_ITEMSHOP_REFRESH_COINS, SUBHEADER_ITEMSHOP_REFRESH_SINGLE_ITEM, SUBHEADER_ITEMSHOP_REMOVE_SINGLE_ITEM, SUBHEADER_ITEMSHOP_ADD_SINGLE_ITEM, SUBHEADER_PROMOTION_CODE_REWARDS, }; typedef struct SPacketCGBuyItemshopItem { BYTE\theader; char\thash[ITEMSHOP_HASH_MAX_LEN + 1]; WORD\twCount; } TPacketCGBuyItemshopItem; typedef struct SPacketCGRedeemPromotionCode { BYTE\theader; char\tpromotion_code[PROMOTION_CODE_MAX_LEN + 1]; } TPacketCGRedeemPromotionCode; #endif 12. packet_info.cpp Search:\nCPacketInfoCG::CPacketInfoCG() Add to the end of this function:\n#ifdef ENABLE_ITEMSHOP Set(HEADER_CG_BUY_ITEMSHOP_ITEM, sizeof(TPacketCGBuyItemshopItem), \"BuyItemshopItem\", true); Set(HEADER_CG_PROMOTION, sizeof(TPacketCGRedeemPromotionCode), \"RedeemPromotionCode\", true); #endif 13. MakeFile / Solution Add:\nitemshop.cpp\\, 14. itemshop.h Create: itemshop.h\nInsert this:\n/* .oooooo. oooooo oooo ooooo ooo .oooo. d8P' `Y8b `888. .8' `888b. `8' .dP\"\"Y88b 888 `888. .8' 8 `88b. 8 ]8P' 888 `888.8' 8 `88b. 8 \u003c88b. 888 `888' 8 `88b.8 `88b. `88b ooo 888 8 `888 o. .88P `Y8bood8P' o888o o8o `8 `8bd88P' Version: Release 1.0.0 Contacts: Metin2Downloads: https://www.metin2downloads.to/cms/user/11018-cyn3/ Discord: Franky#6315 Support: Discord: https://discord.gg/sura-head Special thanks to: - Rainer \u003c- Design \u0026 Animations - SamaLamaDingDong \u003c- Code review (Server - Source) - \u003c\u003e \u003c- Mental support */ #include \"../../common/singleton.h\" #include \"../../common/service.h\" #include \u003cunordered_map\u003e #include \"constants.h\" #ifdef ENABLE_ITEMSHOP class CItemshopManager : public singleton\u003cCItemshopManager\u003e { public: CItemshopManager(); ~CItemshopManager(); void InitializeItems(TItemshopItemTable* table, WORD size); void InitializeCategories(TItemshopCategoryTable* table, WORD size); void RefreshSingleItem(TItemshopItemTable* item); void RemoveSingleItem(TItemshopItemTable* item); void AddSingleItem(TItemshopItemTable* item); bool IsValidHash(const char* hash); bool HasEnoughCoins(DWORD accID, unsigned long long ullItemPrice); bool IsValidPurchase(TItemshopItemTable itemInfo, WORD wCount, unsigned long long \u0026ullPrice); bool CanBuyItem(LPCHARACTER ch, const char* hash, WORD wCount); bool BuyItem(LPCHARACTER ch, const char* hash, WORD wCount); const std::unordered_map \u003cBYTE, TItemshopCategoryInfo\u003e GetItemshopCategories(); const std::unordered_map \u003cBYTE, std::vector\u003cTItemshopItemTable\u003e\u003e GetItemshopItems(); std::unordered_map \u003cBYTE, TItemshopCategoryInfo\u003e m_ItemshopCategories; std::unordered_map \u003cBYTE, std::vector\u003cTItemshopItemTable\u003e\u003e m_ItemshopItems; }; #endif 15. itemshop.cpp Create: itemshop.cpp\nInsert this:\n#include \"stdafx.h\" #include \"itemshop.h\" #include \"char.h\" #include \"db.h\" #include \"char_manager.h\" #include \"sectree_manager.h\" #include \"config.h\" #include \"item_manager.h\" #include \"item.h\" #include \"desc.h\" #ifdef ENABLE_ITEMSHOP CItemshopManager::CItemshopManager() { } CItemshopManager::~CItemshopManager() { } void CItemshopManager::InitializeItems(TItemshopItemTable * table, WORD size) { m_ItemshopItems.clear(); for (int i = 0; i \u003c size; ++i, ++table) { const TItemTable* item_table = ITEM_MANAGER::instance().GetTable(table-\u003edwVnum); if (item_table) { if (table-\u003ewCount \u003e 1 \u0026\u0026 ((IS_SET(item_table-\u003edwAntiFlags, ITEM_ANTIFLAG_STACK)) || !(IS_SET(item_table-\u003edwFlags, ITEM_FLAG_STACKABLE)))) { sys_err(\"\u003cItemshop / Are you stupid?\u003e Vnum %lld Count %d but item is not stackable. Adjust this shit!\", table-\u003edwVnum, table-\u003ewCount); continue; } m_ItemshopItems[table-\u003ebyCategory].push_back(*table); } } } void CItemshopManager::InitializeCategories(TItemshopCategoryTable* table, WORD size) { m_ItemshopCategories.clear(); for (int i = 0; i \u003c size; ++i, ++table) { m_ItemshopCategories.insert(std::pair(table-\u003eindex, table-\u003einfo)); } } void CItemshopManager::RefreshSingleItem(TItemshopItemTable* item) { for (auto\u0026 category : m_ItemshopItems) { for (auto\u0026 cur_item : category.second) { if (!strcmp(cur_item.hash, item-\u003ehash)) { thecore_memcpy(\u0026cur_item, item, sizeof(TItemshopItemTable)); CHARACTER_MANAGER::instance().SendItemshopSingleItemRefresh(item); return; } } } } void CItemshopManager::RemoveSingleItem(TItemshopItemTable* item) { for (auto\u0026 category : m_ItemshopItems) { for(int i = 0; i \u003c category.second.size(); i++) { if (!strcmp(category.second[i].hash, item-\u003ehash)) { category.second.erase(category.second.begin() + i); CHARACTER_MANAGER::instance().SendItemshopSingleRemoveItem(item); return; } } } } void CItemshopManager::AddSingleItem(TItemshopItemTable* item) { const TItemTable* item_table = ITEM_MANAGER::instance().GetTable(item-\u003edwVnum); if (item_table) { if (item-\u003ewCount \u003e 1 \u0026\u0026 ((IS_SET(item_table-\u003edwAntiFlags, ITEM_ANTIFLAG_STACK)) || !(IS_SET(item_table-\u003edwFlags, ITEM_FLAG_STACKABLE)))) { sys_err(\"\u003cItemshop / Are you stupid?\u003e Vnum %ld Count %d but item is not stackable. Adjust this shit!\", item-\u003edwVnum, item-\u003ewCount); return; } m_ItemshopItems[item-\u003ebyCategory].push_back(*item); CHARACTER_MANAGER::instance().SendItemshopSingleAddItem(item); } } bool CItemshopManager::IsValidHash(const char* hash) { for (const auto\u0026 category : m_ItemshopItems) { for (const auto\u0026 item : category.second) { if (!strcmp(hash, item.hash)) return true; } } return false; } bool CItemshopManager::IsValidPurchase(TItemshopItemTable itemInfo, WORD wCount, unsigned long long \u0026ullPrice) { const TItemTable* item_table = ITEM_MANAGER::instance().GetTable(itemInfo.dwVnum); if (item_table) { // NOTE: Log user reason custom packet if (wCount \u003e 1 \u0026\u0026 ((IS_SET(item_table-\u003edwAntiFlags, ITEM_ANTIFLAG_STACK)) || !(IS_SET(item_table-\u003edwFlags, ITEM_FLAG_STACKABLE)))) return false; } if (wCount \u003c= 0 || check_mul_error(itemInfo.wCount, wCount) || itemInfo.wCount * wCount \u003e MAX_ITEM_STACK) { return false; } BYTE discountPercent = MINMAX(0, itemInfo.byDiscountPercent, 100); if (discountPercent \u003e 0) { ullPrice = ullPrice - (ullPrice * discountPercent / 100); } if (check_mul_error\u003cunsigned long long\u003e(ullPrice, wCount)) { return false; } ullPrice *= wCount; return true; } bool CItemshopManager::HasEnoughCoins(DWORD accID, unsigned long long ullItemPrice) { std::unique_ptr\u003cSQLMsg\u003e pkMsg(DBManager::instance().DirectQuery(\"SELECT coins from account.account WHERE id = %ld\", accID)); SQLResult* pRes = pkMsg-\u003eGet(); if (pRes-\u003euiNumRows == 0) { return false; } MYSQL_ROW data = mysql_fetch_row(pRes-\u003epSQLResult); unsigned long long ullTotalCoins; str_to_number(ullTotalCoins, data[0]); return ullTotalCoins \u003e= ullItemPrice; } bool CItemshopManager::CanBuyItem(LPCHARACTER ch, const char* hash, WORD wCount) { if (!ch-\u003eCanUseItemshop()) { ch-\u003eChatPacket(CHAT_TYPE_INFO, LC_TEXT(\"You have to wait 10 seconds after an invalid itemshop action.\")); return false; } if (!IsValidHash(hash)) { ch-\u003eSetItemshopCooldown(thecore_pulse() + PASSES_PER_SEC(10)); return false; } TItemshopItemTable itemInfo{ 0 }; for (const auto\u0026 category : m_ItemshopItems) { for (const auto\u0026 item : category.second) { if (!strcmp(hash, item.hash)) { itemInfo = item; break; } } } if (itemInfo.llLimitCount == 0) return false; unsigned long long ullPrice = itemInfo.ullPrice; if (!IsValidPurchase(itemInfo, wCount, ullPrice)) { sys_err(\"\u003cItemshop\u003e OVERFLOW check failed. PID: %d - BuyCount %d - Hash %s - Vnum %lld - Count %d\", ch-\u003eGetPlayerID(), wCount, itemInfo.hash, itemInfo.dwVnum, itemInfo.wCount); return false; } const TAccountTable\u0026 accTable = ch-\u003eGetDesc()-\u003eGetAccountTable(); if (!HasEnoughCoins(accTable.id, ullPrice)) { ch-\u003eSetItemshopCooldown(thecore_pulse() + PASSES_PER_SEC(10)); ch-\u003eChatPacket(CHAT_TYPE_INFO, LC_TEXT(\"You dont have enough coins.\")); return false; } LPITEM item = ITEM_MANAGER::instance().CreateItem(itemInfo.dwVnum, itemInfo.wCount * wCount); if (!item) { ch-\u003eChatPacket(CHAT_TYPE_INFO, LC_TEXT(\"Invalid item -\u003e Write your Serveradmin to get some free coins :)\")); return false; } int iEmptyCell; if (item-\u003eIsDragonSoul()) { if ((iEmptyCell = ch-\u003eGetEmptyDragonSoulInventory(item)) == -1) { ch-\u003eChatPacket(CHAT_TYPE_INFO, LC_TEXT(\"You carry too many Items.\")); M2_DESTROY_ITEM(item); return false; } } else { // NOTE: Adjust for special inventory by sanii if ((iEmptyCell = ch-\u003eGetEmptyInventory(item-\u003eGetSize())) == -1) { ch-\u003eChatPacket(CHAT_TYPE_INFO, LC_TEXT(\"You carry too many Items.\")); M2_DESTROY_ITEM(item); return false; } } M2_DESTROY_ITEM(item); return true; } // NOTE: CALL THIS ONLY FROM DB_MANAGER bool CItemshopManager::BuyItem(LPCHARACTER ch, const char* hash, WORD wCount) { if (!IsValidHash(hash)) { ch-\u003eSendItemshopItemsPacket(GetItemshopItems(),GetItemshopCategories()); return false; } TItemshopItemTable itemInfo{0}; for (const auto\u0026 category : m_ItemshopItems) { for (const auto \u0026 item : category.second) { if (!strcmp(hash, item.hash)) { itemInfo = item; break; } } } unsigned long long ullPrice = itemInfo.ullPrice; if (!IsValidPurchase(itemInfo, wCount, ullPrice)) { sys_err(\"\u003cItemshop\u003e OVERFLOW check failed. PID: %d - BuyCount %d - Hash %s - Vnum %lld - Count %d\", ch-\u003eGetPlayerID(), wCount, itemInfo.hash, itemInfo.dwVnum, itemInfo.wCount); return false; } const TAccountTable\u0026 accTable = ch-\u003eGetDesc()-\u003eGetAccountTable(); if (!HasEnoughCoins(accTable.id, ullPrice)) { ch-\u003eChatPacket(CHAT_TYPE_INFO, LC_TEXT(\"You dont have enough coins.\")); return false; } LPITEM item = ITEM_MANAGER::instance().CreateItem(itemInfo.dwVnum, itemInfo.wCount * wCount); if (!item) { ch-\u003eChatPacket(CHAT_TYPE_INFO, LC_TEXT(\"Invalid item -\u003e Write your Serveradmin to get some free coins :)\")); return false; } // NOTE: adjust as needed bool forcedSockets = false; if (itemInfo.alSockets[0]) { for (int i = 0; i \u003c ITEM_LIMIT_MAX_NUM; i++) { if (LIMIT_REAL_TIME == item-\u003eGetLimitType(i)) { // NOTE: We set socket0 as time value, but only if socket is set so we still can use default times in createitem item-\u003eSetSocket(0, time(0) + itemInfo.alSockets[0]); // NOTE: We dont have to start realtime event because createitem already does forcedSockets = true; } else if (LIMIT_TIMER_BASED_ON_WEAR == item-\u003eGetLimitType(i)) { item-\u003eSetSocket(0, itemInfo.alSockets[0]); forcedSockets = true; } } } // NOTE: I dont have systems where i need to set multiple sockets in createitem but you can still do: // for(const auto\u0026 socket : itemInfo.alSockets) if(!forcedSockets) item-\u003eSetSockets(itemInfo.alSockets); // NOTE: You can adjust this if you want to use bAlterToMagicItemPct item-\u003eSetAttributes(itemInfo.aAttr); int iEmptyCell; if (item-\u003eIsDragonSoul()) { if ((iEmptyCell = ch-\u003eGetEmptyDragonSoulInventory(item)) == -1) { ch-\u003eChatPacket(CHAT_TYPE_INFO, LC_TEXT(\"You carry too many Items.\")); M2_DESTROY_ITEM(item); return false; } } else { // NOTE: Adjust for special inventory by sanii if ((iEmptyCell = ch-\u003eGetEmptyInventory(item-\u003eGetSize())) == -1) { ch-\u003eChatPacket(CHAT_TYPE_INFO, LC_TEXT(\"You carry too many Items.\")); M2_DESTROY_ITEM(item); return false; } } DBManager::instance().DirectQuery(\"UPDATE account.account SET coins = coins - %lld WHERE id = %ld\", ullPrice, accTable.id); if (item-\u003eIsDragonSoul()) item-\u003eAddToCharacter(ch, TItemPos(DRAGON_SOUL_INVENTORY, iEmptyCell)); else item-\u003eAddToCharacter(ch, TItemPos(INVENTORY, iEmptyCell)); ch-\u003eChatPacket(CHAT_TYPE_INFO, LC_TEXT(\"The purchase of the item was successful.\")); ch-\u003eSendItemshopCoinPacket(); return true; } const std::unordered_map \u003cBYTE, std::vector\u003cTItemshopItemTable\u003e\u003e CItemshopManager::GetItemshopItems() { return m_ItemshopItems; } const std::unordered_map \u003c BYTE, TItemshopCategoryInfo\u003e CItemshopManager::GetItemshopCategories() { return m_ItemshopCategories; } #endif ",
    "description": "",
    "tags": null,
    "title": "Game",
    "uri": "/systems/itemshop/installation/server/game/"
  },
  {
    "content": "db/conf.txt Search:\nSQL_COMMON = [...] Add and adjust with username \u0026 pass:\nSQL_ITEMSHOP = \"localhost itemshop root admin 0\" Mysql Note: Add socket3, socket4, socket5 if needed\nCreate ‘itemshop’ database and execute:\nSET NAMES utf8mb4; SET FOREIGN_KEY_CHECKS = 0; -- ---------------------------- -- Table structure for itemshop_categories -- ---------------------------- DROP TABLE IF EXISTS `itemshop_categories`; CREATE TABLE `itemshop_categories` ( `category_index` int(11) UNSIGNED NOT NULL DEFAULT 0, `category_name` varchar(255) CHARACTER SET latin1 COLLATE latin1_general_ci NULL DEFAULT 'NONAME', `category_icon` varchar(255) CHARACTER SET latin1 COLLATE latin1_general_ci NULL DEFAULT '71171', `category_state` enum('DISABLED','ENABLED') CHARACTER SET latin1 COLLATE latin1_general_ci NULL DEFAULT 'DISABLED', PRIMARY KEY (`category_index`) USING BTREE, INDEX `category`(`category_index`) USING BTREE, INDEX `name`(`category_name`) USING BTREE ) ENGINE = MyISAM CHARACTER SET = latin1 COLLATE = latin1_general_ci ROW_FORMAT = Dynamic; -- ---------------------------- -- Records of itemshop_categories -- ---------------------------- INSERT INTO `itemshop_categories` VALUES (1, 'First', 'bag.png', 'ENABLED'); INSERT INTO `itemshop_categories` VALUES (2, 'Second', 'beast.png', 'ENABLED'); INSERT INTO `itemshop_categories` VALUES (3, 'Third', 'class.png', 'ENABLED'); INSERT INTO `itemshop_categories` VALUES (4, 'Fourth', 'ice.png', 'ENABLED'); INSERT INTO `itemshop_categories` VALUES (5, 'Fifth', 'rune.png', 'ENABLED'); INSERT INTO `itemshop_categories` VALUES (6, 'Sixth', '71171', 'ENABLED'); -- ---------------------------- -- Table structure for itemshop_items -- ---------------------------- DROP TABLE IF EXISTS `itemshop_items`; CREATE TABLE `itemshop_items` ( `category` smallint(4) NOT NULL DEFAULT 0, `itemIndex` bigint(18) UNSIGNED NOT NULL, `vnum` int(11) UNSIGNED NOT NULL DEFAULT 0, `count` smallint(4) UNSIGNED NOT NULL DEFAULT 1, `price` bigint(18) UNSIGNED NOT NULL DEFAULT 1, `discountPercent` smallint(4) UNSIGNED NOT NULL DEFAULT 0, `limitCount` int(11) NULL DEFAULT -1, `startTime` datetime NOT NULL DEFAULT '0000-00-00 00:00:00', `endTime` datetime NOT NULL DEFAULT '0000-00-00 00:00:00', `weight` int(11) NOT NULL DEFAULT 0, `socket0` int(10) UNSIGNED NOT NULL DEFAULT 0, `socket1` int(10) UNSIGNED NOT NULL DEFAULT 0, `socket2` int(10) UNSIGNED NOT NULL DEFAULT 0, `attrtype0` tinyint(4) NOT NULL DEFAULT 0, `attrvalue0` smallint(6) NOT NULL DEFAULT 0, `attrtype1` tinyint(4) NOT NULL DEFAULT 0, `attrvalue1` smallint(6) NOT NULL DEFAULT 0, `attrtype2` tinyint(4) NOT NULL DEFAULT 0, `attrvalue2` smallint(6) NOT NULL DEFAULT 0, `attrtype3` tinyint(4) NOT NULL DEFAULT 0, `attrvalue3` smallint(6) NOT NULL DEFAULT 0, `attrtype4` tinyint(4) NOT NULL DEFAULT 0, `attrvalue4` smallint(6) NOT NULL DEFAULT 0, `attrtype5` tinyint(4) NOT NULL DEFAULT 0, `attrvalue5` smallint(6) NOT NULL DEFAULT 0, `attrtype6` tinyint(4) NOT NULL DEFAULT 0, `attrvalue6` smallint(6) NOT NULL DEFAULT 0, PRIMARY KEY (`itemIndex`) USING BTREE, INDEX `category_index`(`category`) USING BTREE ) ENGINE = MyISAM AUTO_INCREMENT = 30 CHARACTER SET = latin1 COLLATE = latin1_general_ci ROW_FORMAT = Fixed; -- ---------------------------- -- Records of itemshop_items -- ---------------------------- INSERT INTO `itemshop_items` VALUES (1, 34534, 19, 1, 222, 10, 0, '2022-09-11 15:37:11', '2022-09-11 15:37:17', 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0); INSERT INTO `itemshop_items` VALUES (2, 232, 59, 1, 100, 0, -1, '2022-09-10 23:54:34', '2022-09-10 23:55:45', 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0); INSERT INTO `itemshop_items` VALUES (3, 342, 49, 1, 100, 0, -1, '0000-00-00 00:00:00', '0000-00-00 00:00:00', 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0); INSERT INTO `itemshop_items` VALUES (4, 555, 39, 1, 100, 0, -1, '0000-00-00 00:00:00', '0000-00-00 00:00:00', 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0); INSERT INTO `itemshop_items` VALUES (5, 645, 29, 1, 100, 0, -1, '0000-00-00 00:00:00', '0000-00-00 00:00:00', 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0); INSERT INTO `itemshop_items` VALUES (6, 54333, 19, 1, 100, 0, -1, '0000-00-00 00:00:00', '0000-00-00 00:00:00', 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0); -- ---------------------------- -- Table structure for promotion_codes -- ---------------------------- DROP TABLE IF EXISTS `promotion_codes`; CREATE TABLE `promotion_codes` ( `index` int(11) NOT NULL, `promotion_code` varchar(255) CHARACTER SET latin1 COLLATE latin1_general_ci NOT NULL DEFAULT '', `state` enum('DISABLED','ENABLED') CHARACTER SET latin1 COLLATE latin1_general_ci NULL DEFAULT 'DISABLED', `useCount` bigint(13) NULL DEFAULT 0, PRIMARY KEY (`index`) USING BTREE ) ENGINE = MyISAM CHARACTER SET = latin1 COLLATE = latin1_general_ci ROW_FORMAT = Dynamic; -- ---------------------------- -- Records of promotion_codes -- ---------------------------- INSERT INTO `promotion_codes` VALUES (1, 'Metin2Downloads', 'ENABLED', 100); -- ---------------------------- -- Table structure for promotion_redeemed -- ---------------------------- DROP TABLE IF EXISTS `promotion_redeemed`; CREATE TABLE `promotion_redeemed` ( `acc_id` int(11) NOT NULL, `redeemed_code` varchar(255) CHARACTER SET latin1 COLLATE latin1_general_ci NOT NULL, `time_redeemed` datetime NOT NULL ) ENGINE = MyISAM CHARACTER SET = latin1 COLLATE = latin1_general_ci ROW_FORMAT = Dynamic; -- ---------------------------- -- Records of promotion_redeemed -- ---------------------------- -- ---------------------------- -- Table structure for promotion_rewards -- ---------------------------- DROP TABLE IF EXISTS `promotion_rewards`; CREATE TABLE `promotion_rewards` ( `code_index` int(11) NOT NULL, `vnum` int(11) NOT NULL DEFAULT 0, `count` smallint(4) UNSIGNED NOT NULL DEFAULT 1, `socket0` int(10) UNSIGNED NOT NULL DEFAULT 0, `socket1` int(10) UNSIGNED NOT NULL DEFAULT 0, `socket2` int(10) UNSIGNED NOT NULL DEFAULT 0, `attrtype0` tinyint(4) NOT NULL DEFAULT 0, `attrvalue0` smallint(6) NOT NULL DEFAULT 0, `attrtype1` tinyint(4) NOT NULL DEFAULT 0, `attrvalue1` smallint(6) NOT NULL DEFAULT 0, `attrtype2` tinyint(4) NOT NULL DEFAULT 0, `attrvalue2` smallint(6) NOT NULL DEFAULT 0, `attrtype3` tinyint(4) NOT NULL DEFAULT 0, `attrvalue3` smallint(6) NOT NULL DEFAULT 0, `attrtype4` tinyint(4) NOT NULL DEFAULT 0, `attrvalue4` smallint(6) NOT NULL DEFAULT 0, `attrtype5` tinyint(4) NOT NULL DEFAULT 0, `attrvalue5` smallint(6) NOT NULL DEFAULT 0, `attrtype6` tinyint(4) NOT NULL DEFAULT 0, `attrvalue6` smallint(6) NOT NULL DEFAULT 0 ) ENGINE = MyISAM CHARACTER SET = latin1 COLLATE = latin1_general_ci ROW_FORMAT = Fixed; -- ---------------------------- -- Records of promotion_rewards -- ---------------------------- INSERT INTO `promotion_rewards` VALUES (1, 19, 1, 0, 0, 0, 1, 10000, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0); INSERT INTO `promotion_rewards` VALUES (1, 27994, 242, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0); INSERT INTO `promotion_rewards` VALUES (1, 39, 1, 0, 0, 0, 2, 22222, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0); INSERT INTO `promotion_rewards` VALUES (1, 49, 1, 0, 0, 0, 2, 22222, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0); INSERT INTO `promotion_rewards` VALUES (1, 59, 1, 0, 0, 0, 2, 22222, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0); SET FOREIGN_KEY_CHECKS = 1; ",
    "description": "",
    "tags": null,
    "title": "Database",
    "uri": "/systems/itemshop/installation/server/database/"
  },
  {
    "content": "Welcome to our docs site, here we are trying to share our knowledge and bring the scene forward.\n",
    "description": "",
    "tags": null,
    "title": "docs.sura-head.dev",
    "uri": "/"
  },
  {
    "content": "error: ‘MAX_ITEM_STACK’ was not declared in this scope Explaination:\nMAX_ITEM_STACK -\u003e Is the max stack on your server also known as ITEM_MAX_COUNT Fix:\n#define MAX_ITEM_STACK 200 or\nreplace MAX_ITEM_STACK with your max stack define error: uiitemshop.py banner \u0026 custom icons not visible Fix:\nChange path in uiitemshop.py from root/itemshop to itemshop/ error: Disconnect on buyitem or promotioncode redeem Fix:\nCheck your headers in packet.h error: Auth-crash after ‘/reload i’ command Fix:\nSearch:\nfor (TPeerList::iterator i = m_peerList.begin(); i != m_peerList.end(); ++i) { CPeer* tmp = *i; if (!tmp-\u003eGetChannel()) continue; tmp-\u003eEncodeHeader(HEADER_DG_RELOAD_ITEMSHOP, 0, sizeof(WORD) + sizeof(WORD) + sizeof(TItemshopCategoryTable) * m_iItemshopTableCategorySize + sizeof(TItemshopItemTable) * m_iItemshopTableItemSize ); tmp-\u003eEncode(\u0026m_iItemshopTableCategorySize, sizeof(WORD)); tmp-\u003eEncode(\u0026m_iItemshopTableItemSize, sizeof(WORD)); tmp-\u003eEncode(m_pItemshopTableCategories, sizeof(TItemshopCategoryTable) * m_iItemshopTableCategorySize); tmp-\u003eEncode(m_pItemshopTableItems, sizeof(TItemshopItemTable) * m_iItemshopTableItemSize); } Replace with:\nfor (TPeerList::iterator i = m_peerList.begin(); i != m_peerList.end(); ++i) { CPeer* tmp = *i; if (!tmp-\u003eGetChannel() || tmp == m_pkAuthPeer) continue; tmp-\u003eEncodeHeader(HEADER_DG_RELOAD_ITEMSHOP, 0, sizeof(WORD) + sizeof(WORD) + sizeof(TItemshopCategoryTable) * m_iItemshopTableCategorySize + sizeof(TItemshopItemTable) * m_iItemshopTableItemSize ); tmp-\u003eEncode(\u0026m_iItemshopTableCategorySize, sizeof(WORD)); tmp-\u003eEncode(\u0026m_iItemshopTableItemSize, sizeof(WORD)); tmp-\u003eEncode(m_pItemshopTableCategories, sizeof(TItemshopCategoryTable) * m_iItemshopTableCategorySize); tmp-\u003eEncode(m_pItemshopTableItems, sizeof(TItemshopItemTable) * m_iItemshopTableItemSize); } ",
    "description": "",
    "tags": null,
    "title": "Possible errors and fixes",
    "uri": "/systems/itemshop/errors/"
  },
  {
    "content": "This is a fix for a DoS Vulnerability where invalid player ids are spammed (i.e. HEADER_CG_CHARACTER_SELECT), you can confirm this by looking in the syslog for a bunch of [PLAYER_LOAD] Load from PlayerDB pid[0] open input_login.cpp and add above db_clientdesc-\u003eDBPacket(HEADER_GD_PLAYER_LOAD, d-\u003eGetHandle(), \u0026player_load_packet, sizeof(TPlayerLoadPacket)); if (player_load_packet.player_id == 0) { sys_err(\"invalid player_id from account %d\\n\",c_r.id); d-\u003eDelayedDisconnect(0); return; } it should look like following if (player_load_packet.player_id == 0) { sys_err(\"invalid player_id from account %d\\n\",c_r.id); d-\u003eDelayedDisconnect(0); return; } db_clientdesc-\u003eDBPacket(HEADER_GD_PLAYER_LOAD, d-\u003eGetHandle(), \u0026player_load_packet, sizeof(TPlayerLoadPacket)); search for if (!c_r.players[p-\u003eindex].bChangeName) add above if (c_r.players[p-\u003eindex].dwID == 0) { sys_err(\"invalid player_id from account %d\\n\", c_r.id); d-\u003eDelayedDisconnect(0); return; } search for if (c_r.players[pinfo-\u003eplayer_index].bChangeName) add above if (c_r.players[pinfo-\u003eplayer_index].dwID == 0) { sys_err(\"invalid player_id from account %d\\n\", c_r.id); d-\u003eDelayedDisconnect(0); return; } search for sys_err(\"EmpireSelectFailed %d\", r.players[i].dwID); add below d-\u003eDelayedDisconnect(0); ",
    "description": "",
    "tags": null,
    "title": "DoS vulnerability (invalid player id spam)",
    "uri": "/fixes/invalid_player_id/"
  },
  {
    "content": "In this example we will be using FreeBSD-12.3-RELEASE-amd64-dvd1.iso once you booted off the iso select Install Confirm the default keymap selection with enter Set your hostname Leave the default settings and confirm again with enter In a single disk setup use Auto (UFS) in a mutlidisk setup Auto (ZFS) with mirror for redundancy Confirm “Entire Disk” with Enter Select “MBR” Confirm “Finish” with Enter Confirm “Commit” Wait for the unpacking to finish Type a secure password Confirm your password Select your network interface select “Yes” to configure IPv4 Select “No” to configure it manually Set your IP address and confirm with “OK” Select “No” to disable IPv6 Set IPv4 DNS #1 to 9.9.9.9 and IPV4 #2 to 149.112.112.112 Set the timezone of your server Set the Date \u0026 Time or Skip if it looks accurate Leave the default settings and confirm with Enter Confirm once again with enter Select “No” to add no additional users to the server Hit Enter to exit the setup Select “No” Select “Reboot” FreeBSD has now been installed and should be functional. ",
    "description": "",
    "tags": null,
    "title": "FreeBSD",
    "uri": "/installation/freebsd/"
  },
  {
    "content": "Coming soon… ",
    "description": "",
    "tags": null,
    "title": "Guides",
    "uri": "/systems/itemshop/guides/"
  },
  {
    "content": "Installation here we will try to get into every basic of setting up your first server\n",
    "description": "",
    "tags": null,
    "title": "Installation",
    "uri": "/installation/"
  },
  {
    "content": "Itemshop by CYN3 ",
    "description": "",
    "tags": null,
    "title": "Itemshop",
    "uri": "/systems/itemshop/"
  },
  {
    "content": "In this example we explain howto add addons Open root/uiitemshop.py Add a new page and increase PAGE_MAX_NUM Add the new page to ITEMSHOP_INFO[‘pages’] More explained if addon is released ",
    "description": "",
    "tags": null,
    "title": "HowTo Addons",
    "uri": "/systems/itemshop/howto/"
  },
  {
    "content": "the sectree in metin2 is scary and not even the old korean wizards know what the fuck is happening over there so I took a deep breath and started to change some stuff around. While doing so I found something strange, after around 2.5-5k mobs the ram is exploding and its getting extremely laggy. I noticed that every server-source/game/src/entiy.h -\u003e CEntity has its own\nENTITY_MAP m_map_view;\nBut what is a ENTITY_MAP? In short, it’s a container of every currently-visible entity. This is useful to see things but has a small issue: every entity sees every entity in proximity. In other words: the amount of currently tracked entities is growing exponentially.\n1 mob -\u003e 0 entries 2 mobs -\u003e 1 entry per mob / 2 entries 3 mobs -\u003e 2 entries per mob / 6 entries 4 mobs -\u003e 3 entries per mob / 12 entries 2500 mobs -\u003e 2499 entries per mob / 6247500 entries This is not good, but we have to see things, we can’t just remove it completely. Introducing, my pseudo fix:\nsearch for CFuncViewInsert in server-source/game/src/entity_view.cpp my change would be to avoid calling m_me-\u003eViewInsert(ent); every time, so it would look something like that\nclass CFuncViewInsert { private: int dwViewRange; public: LPENTITY m_me; CFuncViewInsert(LPENTITY ent) : dwViewRange(VIEW_RANGE + VIEW_BONUS_RANGE), m_me(ent) { } void operator () (LPENTITY ent) { if (!ent-\u003eIsType(ENTITY_OBJECT)) if (DISTANCE_APPROX(ent-\u003eGetX() - m_me-\u003eGetX(), ent-\u003eGetY() - m_me-\u003eGetY()) \u003e dwViewRange) return; if (m_me-\u003eIsType(ENTITY_CHARACTER)) { LPCHARACTER ch_me = (LPCHARACTER)m_me; if (ch_me-\u003eIsPC()) { m_me-\u003eViewInsert(ent); //the players see everything.. } else if (ch_me-\u003eIsNPC() \u0026\u0026 ent-\u003eIsType(ENTITY_CHARACTER)) { LPCHARACTER ch_ent = (LPCHARACTER)ent; if (ch_ent-\u003eIsPC()) { m_me-\u003eViewInsert(ent); //the npcs see the players... } else if (ch_ent-\u003eIsNPC()) { /* JOTUN/OCHAO/HYDRA CONTENT, WE DONT NEED THIS RIGHT NOW BUT REMEMBER REMEMBER THE 6th OF NOVEMBER if (IS_SET(ch_me-\u003eGetAIFlag(), AIFLAG_HEALER)) { m_me-\u003eViewInsert(ent); //the npc-healers see other npcs (ochao fix) } else { switch (ch_ent-\u003eGetRaceNum()) { case 20434: { m_me-\u003eViewInsert(ent); //the npcs can be seen by other npcs (hydra sail fix) } break; } } */ } } } else { m_me-\u003eViewInsert(ent); } if (ent-\u003eIsType(ENTITY_CHARACTER) \u0026\u0026 m_me-\u003eIsType(ENTITY_CHARACTER)) { LPCHARACTER chMe = (LPCHARACTER) m_me; LPCHARACTER chEnt = (LPCHARACTER) ent; if (chMe-\u003eIsPC() \u0026\u0026 !chEnt-\u003eIsPC() \u0026\u0026 !chEnt-\u003eIsWarp() \u0026\u0026 !chEnt-\u003eIsGoto()) chEnt-\u003eStartStateMachine(); } } }; We check if both entities are of the “character” type and if so we cast them to LPCHARACTERS. If the current view is of a player, he has to see everything if the current view is of a NPC, he has to see only players\nThis fix has some issues, with newer versions of the game there are a few mobs that heal each other - I haven’t tested those neither have I tested this change throughout, but I’m fairly certain that it will work. If there is a problem you could add a type/subtype check or even hardcode the vnums since I think that there are only a handful of NPCs that have to see other NPCs (i.e. jotun)\ngood luck\n",
    "description": "",
    "tags": null,
    "title": "SecTree Memory adjustment",
    "uri": "/fixes/sectree_memory/"
  },
  {
    "content": "creating a ssh key ssh-keygen -t rsa -C \"my server\" set a path where it should save confirm 2 times with enter so no password is set the key is now generated connect to your server using your normal password ssh root@myip create the .ssh folder mkdir ~/.ssh open ~/.ssh/authorized_keys using nano nano ~/.ssh/authorized_keys copy your public key from the .pub file (in this example my-server.pub) and paste it into the ssh session close nano by pressing ctrl + X confirm with Y confirm with Enter open the sshd (ssh deamon) config file using nano nano /etc/ssh/sshd_config enabling using ssh key by removing the # Infront of PubkeyAuthentication yes before:\n#PubkeyAuthentication yes after:\nPubkeyAuthentication yes disabling the password usage by adding # infront of PasswordAuthentication yes before:\nPasswordAuthentication yes after:\n#PasswordAuthentication yes close nano once again using CTRL + X, confirming with Y, and then confirming with enter restart sshd service sshd restart exit the ssh session exit connect again using the ssh key ssh root@myip -i my-server now everything is done, auth over password isn’t possible anymore and your server is secured using an ssh key. ",
    "description": "",
    "tags": null,
    "title": "SSH",
    "uri": "/installation/ssh/"
  },
  {
    "content": "Systems by sura_head ",
    "description": "",
    "tags": null,
    "title": "Systems",
    "uri": "/systems/"
  },
  {
    "content": "Hello, today I saw that people are using the old collsion rendering code from ymir and I think its disgusting and useless to be honest. The new method is using wire framed 3d meshes instead of weird circles that look like a psychosis. You enable the collision rendering by opening the console and run the “collision” command\nBefore After this is only in the client source.\nGameLib/ActorInstanceRender.cpp search for void CActorInstance::RenderCollisionData() and replace whole function with\nvoid CActorInstance::RenderCollisionData() { static CScreen screen; D3DXVECTOR3 object_center; float sphere_radius; GetBoundingSphere(object_center, sphere_radius); //render-box if (false)//nice but kinda useless, enable if needed { STATEMANAGER.SetRenderState(D3DRS_TEXTUREFACTOR, D3DCOLOR_XRGB(0, isShow() ? 255 : 0, isShow() ? 0 : 255)); screen.RenderSphere(NULL, object_center.x, //left - right object_center.y, // front - back object_center.z, // up - down sphere_radius, D3DFILL_WIREFRAME ); } //hit-box for (const TCollisionPointInstance\u0026 point : m_DefendingPointInstanceList) { for (const CDynamicSphereInstance\u0026 collision : point.SphereInstanceVector) { STATEMANAGER.SetRenderState(D3DRS_TEXTUREFACTOR, D3DCOLOR_XRGB(255, 0, 0)); screen.RenderSphere(NULL, collision.v3Position.x, //left - right collision.v3Position.y, // front - back collision.v3Position.z, // up - down collision.fRadius, D3DFILL_WIREFRAME ); } } //click-box for (const TCollisionPointInstance\u0026 point : m_BodyPointInstanceList) { for (const CDynamicSphereInstance\u0026 collision : point.SphereInstanceVector) { STATEMANAGER.SetRenderState(D3DRS_TEXTUREFACTOR, D3DCOLOR_XRGB(0, 255, 0)); screen.RenderSphere(NULL, collision.v3Position.x, //left - right collision.v3Position.y, // front - back collision.v3Position.z, // up - down collision.fRadius, D3DFILL_WIREFRAME ); } } //AoE-Skill-box for (const CDynamicSphereInstance\u0026 collision : m_kSplashArea.SphereInstanceVector) { STATEMANAGER.SetRenderState(D3DRS_TEXTUREFACTOR, D3DCOLOR_XRGB(0, 0, 255)); screen.RenderSphere(NULL, collision.v3Position.x, //left - right collision.v3Position.y, // front - back collision.v3Position.z, // up - down collision.fRadius, D3DFILL_WIREFRAME ); } } EterLib/GrpScreen.h change\nvoid RenderD3DXMesh(LPD3DXMESH lpMesh, const D3DXMATRIX * c_pmatWorld, float fx, float fy, float fz, float fRadius, D3DFILLMODE d3dFillMode); to\nvoid RenderBox(D3DXMATRIX c_pmatWorld, D3DXVECTOR3 size, D3DFILLMODE d3dFillMode = D3DFILL_SOLID); void RenderD3DXMesh(LPD3DXMESH lpMesh, const D3DXMATRIX * c_pmatWorld, D3DFILLMODE d3dFillMode); EterLib/GrpScreen.cpp add\n#include \u003ccmath\u003e at the top\nchange\nvoid CScreen::RenderD3DXMesh(LPD3DXMESH lpMesh, const D3DXMATRIX * c_pmatWorld, float fx, float fy, float fz, float fRadius, D3DFILLMODE d3dFillMode) { ... } to\nvoid CScreen::RenderD3DXMesh(LPD3DXMESH lpMesh, const D3DXMATRIX * matWorld, D3DFILLMODE d3dFillMode) { CD3DXMeshRenderingOption SetRenderingOption(d3dFillMode, *matWorld); #if DIRECT3D_VERSION \u003e= 0x0900 LPDIRECT3DINDEXBUFFER9 lpIndexBuffer; LPDIRECT3DVERTEXBUFFER9 lpVertexBuffer; lpMesh-\u003eGetIndexBuffer(\u0026lpIndexBuffer); lpMesh-\u003eGetVertexBuffer(\u0026lpVertexBuffer); STATEMANAGER.SetFVF(lpMesh-\u003eGetFVF()); #else LPDIRECT3DINDEXBUFFER8 lpIndexBuffer; LPDIRECT3DVERTEXBUFFER8 lpVertexBuffer; lpMesh-\u003eGetIndexBuffer(\u0026lpIndexBuffer); lpMesh-\u003eGetVertexBuffer(\u0026lpVertexBuffer); STATEMANAGER.SetVertexShader(lpMesh-\u003eGetFVF()); #endif STATEMANAGER.SetIndices(lpIndexBuffer, 0); STATEMANAGER.SetStreamSource(0, lpVertexBuffer, 24); STATEMANAGER.DrawIndexedPrimitive(D3DPT_TRIANGLELIST, 0, lpMesh-\u003eGetNumVertices(), 0, lpMesh-\u003eGetNumFaces()); } change\nvoid CScreen::RenderSphere(const D3DXMATRIX * c_pmatWorld, float fx, float fy, float fz, float fRadius, D3DFILLMODE d3dFillMode) { ... } to\nvoid CScreen::RenderSphere(const D3DXMATRIX * c_pmatWorld, float fx, float fy, float fz, float fRadius, D3DFILLMODE d3dFillMode) { D3DXMATRIX matTranslation; D3DXMATRIX matScaling; D3DXMatrixTranslation(\u0026matTranslation, fx, fy, fz); D3DXMatrixScaling(\u0026matScaling, fRadius, fRadius, fRadius); D3DXMATRIX matWorld = matScaling * matTranslation; if (c_pmatWorld) { matWorld *= *c_pmatWorld; } RenderD3DXMesh(ms_lpSphereMesh, \u0026matWorld, d3dFillMode); } change\nvoid CScreen::RenderCylinder(const D3DXMATRIX * c_pmatWorld, float fx, float fy, float fz, float fRadius, float height, D3DFILLMODE d3dFillMode) to\nvoid CScreen::RenderCylinder(const D3DXMATRIX * c_pmatWorld, float fx, float fy, float fz, float fRadius, float height, D3DFILLMODE d3dFillMode) { D3DXMATRIX matTranslation; D3DXMATRIX matScaling; D3DXMatrixTranslation(\u0026matTranslation, fx, fy, fz); D3DXMatrixScaling(\u0026matScaling, fRadius, fRadius, fRadius + height); D3DXMATRIX matWorld; matWorld = matScaling * matTranslation; if (c_pmatWorld) { matWorld *= *c_pmatWorld; } RenderD3DXMesh(ms_lpCylinderMesh, \u0026matWorld, d3dFillMode); } void CScreen::RenderBox(D3DXMATRIX world, D3DXVECTOR3 size, D3DFILLMODE d3dFillMode) { D3DXMATRIX scale; //width, height, depth D3DXMatrixScaling(\u0026scale, size.x, size.y, 10); D3DXMATRIX result = scale * world; RenderD3DXMesh(ms_lpBoxMesh, \u0026result, d3dFillMode); } EterLib/GrpDevice.cpp find\nD3DXCreateCylinder(ms_lpd3dDevice, 1.0f, 1.0f, 1.0f, 8, 8, \u0026ms_lpCylinderMesh, NULL); add below\nD3DXCreateBox(ms_lpd3dDevice, 1.0f, 1.0f, 1.0f, \u0026ms_lpBoxMesh, NULL); find\nsafe_release(ms_lpCylinderMesh); add below\nsafe_release(ms_lpBoxMesh); EterLib/GrpBase.h find\nstatic LPD3DXMESH\tms_lpCylinderMesh; add below\nstatic LPD3DXMESH\tms_lpBoxMesh; EterLib/GrpBase.cpp find\nLPD3DXMESH\tCGraphicBase::ms_lpCylinderMesh = NULL; add below\nLPD3DXMESH\tCGraphicBase::ms_lpBoxMesh = NULL; EterLib/CollisionData.h find\nD3DXVECTOR3 v3InsideVector[4]; add below\nD3DXVECTOR3 size; D3DXMATRIX trans; find every\nD3DFILL_SOLID inside the EterLib/CollisionData.h file and replace with\nD3DFILL_WIREFRAME EterLib/CollisionData.cpp find\nD3DXVec3Cross(\u0026PlaneData.v3InsideVector[3], \u0026PlaneData.v3Normal, \u0026v3Line3); add below\nPlaneData.trans = matTransform; PlaneData.size.x = c_pCollisionData-\u003efDimensions[0]; PlaneData.size.y = c_pCollisionData-\u003efDimensions[1]; find\nvoid CSphereCollisionInstance::Render(D3DFILLMODE d3dFillMode) and replace with\nvoid CSphereCollisionInstance::Render(D3DFILLMODE d3dFillMode) { static CScreen s; STATEMANAGER.SetRenderState(D3DRS_TEXTUREFACTOR, D3DCOLOR_XRGB(255, 255, 0)); s.RenderSphere( NULL, m_attribute.v3Position.x, m_attribute.v3Position.y, m_attribute.v3Position.z, m_attribute.fRadius, d3dFillMode ); } void CPlaneCollisionInstance::Render(D3DFILLMODE d3dFillMode) and replace with\nvoid CPlaneCollisionInstance::Render(D3DFILLMODE) { static CScreen s; STATEMANAGER.SetRenderState(D3DRS_TEXTUREFACTOR, D3DCOLOR_XRGB(50, 50, 255)); s.RenderBox( m_attribute.trans, m_attribute.size, D3DFILL_WIREFRAME ); } void CCylinderCollisionInstance::Render(D3DFILLMODE d3dFillMode) and replace with\nvoid CCylinderCollisionInstance::Render(D3DFILLMODE d3dFillMode) { static CScreen s; STATEMANAGER.SetRenderState(D3DRS_TEXTUREFACTOR, D3DCOLOR_XRGB(0, 255, 255)); s.RenderCylinder( NULL, m_attribute.v3Position.x, m_attribute.v3Position.y, m_attribute.v3Position.z, m_attribute.fRadius, m_attribute.fHeight, d3dFillMode ); } void CAABBCollisionInstance::Render(D3DFILLMODE d3dFillMode) and replace with\nvoid CAABBCollisionInstance::Render(D3DFILLMODE d3dFillMode) { static CScreen s; STATEMANAGER.SetRenderState(D3DRS_TEXTUREFACTOR, D3DCOLOR_XRGB(255, 50, 255)); s.RenderCube( m_attribute.v3Min.x, m_attribute.v3Min.y, m_attribute.v3Min.z, m_attribute.v3Max.x, m_attribute.v3Max.y, m_attribute.v3Max.z ); } void COBBCollisionInstance::Render(D3DFILLMODE d3dFillMode) and replace with\nvoid COBBCollisionInstance::Render(D3DFILLMODE d3dFillMode) { static CScreen s; STATEMANAGER.SetRenderState(D3DRS_TEXTUREFACTOR, D3DCOLOR_XRGB(255, 255, 50)); s.RenderCube( m_attribute.v3Min.x, m_attribute.v3Min.y, m_attribute.v3Min.z, m_attribute.v3Max.x, m_attribute.v3Max.y, m_attribute.v3Max.z, m_attribute.matRot ); } ",
    "description": "",
    "tags": null,
    "title": "Collision rendering",
    "uri": "/fixes/collsion_rendering/"
  },
  {
    "content": "Fixes by sura_head ",
    "description": "",
    "tags": null,
    "title": "Fixes",
    "uri": "/fixes/"
  },
  {
    "content": "installing sql server over pkg pkg install mysql56-server ",
    "description": "",
    "tags": null,
    "title": "MySQL",
    "uri": "/installation/mysql/"
  },
  {
    "content": "install netdata pkg install netdata set the rc.conf to enable netdata sysrc netdata_enable=\"YES\" start netdata service netdata start open netdata.conf nano /usr/local/etc/netdata/netdata.conf replace 127.0.0.1 with 0.0.0.0 before:\nbind to = 127.0.0.1 after:\nbind to = 0.0.0.0 Close nano with ctrl + X and confirm with ctrl + Y open cloud.conf nano /var/db/netdata/cloud.d/cloud.conf paste following content to disable the cloud services [global] enabled = no Close nano with ctrl + X and confirm with ctrl + Y restart netdata service netdata restart netdata is now accessable via http://yourip:19999/ ",
    "description": "",
    "tags": null,
    "title": "Netdata",
    "uri": "/installation/netdata/"
  },
  {
    "content": "Mysql-Table explanations itemshop_categories category_index:\nint -\u003e Just because unique categorie index / also works as reverse “weight” -\u003e lower = top category_name:\nString -\u003e Name of category Note: You can add categories to uiitemshop.py -\u003e ITEMSHOP_INFO and translate like: 'categories' : { 'WEAPON' : localeInfo.ITEMSHOP_WEAPON, } category_icon:\nString -\u003e vnum of item or icon name with type Example: ice.png (root/itemshop/icons) or 71171 category_state:\nEnum -\u003e in this case used as bool Enables category \u0026 items itemshop_items vnum Itemvnum count Itemcount price Itemprice discountPercent discount 0 - 100% limitCount Disabled/Unlimited = -1 Out of order = 0 Count left =\u003e 0 startTime Time item will be buyable endTime Time item will stop being buyable weight works as reverse “weight” -\u003e lower = top socket For realtime or on wear events just add the number in seconds to socket0 else it will use default value attr No explaination needed promotion_codes index unique index to pair rewards to code promotion_code Code defined for index Note: You can also combine codes Test123 with count 10 and Test123 with count 20 will both count until 0 state Enables / Disables code useCount Redeems left promotion_redeemed log-table \u0026 “already redeemed” source promotion_rewards code_index unique index from promotion_codes table vnum itemvnum count itemcount ",
    "description": "",
    "tags": null,
    "title": "Mysql-Tables",
    "uri": "/systems/itemshop/mysql/"
  },
  {
    "content": "",
    "description": "",
    "tags": null,
    "title": "Categories",
    "uri": "/categories/"
  },
  {
    "content": "",
    "description": "",
    "tags": null,
    "title": "Tags",
    "uri": "/tags/"
  }
]
